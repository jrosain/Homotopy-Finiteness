#+TITLE: Group Finiteness
#+NAME: Group Finiteness
#+AUTHOR: Johann Rosain

* Finiteness of groups of finite order

  #+begin_src ctt
  module GroupFiniteness where
  #+end_src

This file is an application of the [[file:HomotopyFiniteness.org][Homotopy Finiteness]] to semigroups and groups. The goal is to compute the number of groups of finite order up to isomorphism, and to analyze the computations of the proof to better understand what's going on.

** Packages imports

The imported packages can be accessed via the following links:
   - [[file:HomotopyFiniteness.org][HomotopyFiniteness]]
   - [[file:Lib/Groups.org][Lib/Groups]]
   #+begin_src ctt
  import Lib.Groups
  import HomotopyFiniteness
   #+end_src

** Semigroups of order

As a group is /morally/ a semigroup augmented with the property =is-group=, we start by showing that semigroups of order =n= have a finite number of connected components (read: there is a finite number of semigroups of order =n= up to isomorphism). A semigroup of order =n= is a semigroup =G= such that there is a mere bijection between =G= and =Fin n=.
#+begin_src ctt
  Semigroup-of-Order (n : Nat) : U =
    Sg Semigroup (\ G. mere-equiv (Fin n) (Semigroup/type G))
#+end_src

Recall that a Semigroup is defined as follows: \Sigma_{X: Set}(has-assoc-op(X)). But as || Fin n \simeq X ||, X is a set; thus we have a redundant information. As such, we want to show that the type of semigroups of order n are equivalent to the following type.
#+begin_src ctt
  Semigroup-of-Order' (n : Nat) : U =
    Sg (Sg U (\ X. mere-equiv (Fin n) X)) (\ X. has-assoc-op X.1)
#+end_src

Indeed, it is easy to show that has-assoc-op is \pi_0-finite; in fact, it is finite by finiteness of X.
#+begin_src ctt
  has-assoc-op/is-finite (X : U) (H : is-finite X) : is-finite (has-assoc-op X) =
    is-finite/closed-Sg
      ( X -> X -> X)
      ( is-assoc X)
      ( is-finite/Pi X
          ( \ _. X -> X) H
          ( \ _. is-finite/Pi X
                ( \ _. X) H
                ( \ _. H)))
      ( \ h. is-finite/Pi X
            ( \ x. (y z : X) -> Path X (h (h x y) z) (h x (h y z))) H
            ( \ x. is-finite/Pi X
                  ( \ y. (z : X) -> Path X (h (h x y) z) (h x (h y z))) H
                  ( \ y. is-finite/Pi X
                        ( \ z. Path X (h (h x y) z) (h x (h y z))) H
                        ( \ z. is-decidable/is-finite
                                ( Path X (h (h x y) z) (h x (h y z)))
                                ( is-finite/is-set X H
                                  ( h (h x y) z)
                                  ( h x (h y z)))
                                ( is-finite/has-decidable-equality X H
                                  ( h (h x y) z)
                                  ( h x (h y z)))))))
#+end_src

Moreover, it is also easy to show that \Sigma_{(X: U)}|| Fin n \simeq X || is \pi_k-finite, forall k. First, we show that \Sigma_{(X: U)}|| Fin n \simeq X || is contractible. Indeed, its center of contraction is (Fin n, refl-Equiv) and by univalence, any X such that || Fin n \simeq X ||, we have Fin n = X as we show a property.
#+begin_src ctt
  mere-equiv-Fin/is-conn-Set-trunc (n : Nat) : is-conn (Sg U (\ X. mere-equiv (Fin n) X)) = 
    let center-of-contraction : Sg U (\ X. mere-equiv (Fin n) X) = (Fin n, Prop-trunc/unit (Equiv/refl (Fin n))) in
    ( Set-trunc/unit (center-of-contraction),
      ( ind-Set-trunc/Prop
	( Sg U (\ X. mere-equiv (Fin n) X))
	( \ u. Set-trunc/eq/Prop
	      ( Sg U (\ X. mere-equiv (Fin n) X))
	      ( Set-trunc/unit center-of-contraction) u)
	( \ u. let X : U = u.1 in
	      rec-Prop-trunc
	      ( Equiv (Fin n) X)
	      ( Set-trunc/eq/Prop
		( Sg U (\ X'. mere-equiv (Fin n) X'))
		( Set-trunc/unit center-of-contraction)
		( Set-trunc/unit u))
	      ( \ e. Set-trunc/is-effective/inv-map
		    ( Sg U (\ X'. mere-equiv (Fin n) X'))
		    ( center-of-contraction) u
		    ( Prop-trunc/unit
		      ( SgPath-prop U
			( mere-equiv (Fin n))
			( \ X'. Prop-trunc/is-prop (Equiv (Fin n) X'))
			( center-of-contraction) u
			( equiv-to-path (Fin n) X e)))) u.2)))
#+end_src
Using this lemma, we show that \Sigma_{(X: U)}Fin n \simeq X is \pi_k finite for any k.
#+begin_src ctt
  mere-equiv-Fin/is-htpy-finite (n : Nat) : (k : Nat) -> is-htpy-finite k (Sg U (mere-equiv (Fin n))) = split
    zero -> is-contr/is-finite
	    ( Set-trunc (Sg U (mere-equiv (Fin n))))
	    ( mere-equiv-Fin/is-conn-Set-trunc n)
    suc k ->
      ( mere-equiv-Fin/is-htpy-finite n zero,
	\ X Y.
	  is-htpy-finite/closed-Equiv
	    ( Path (Sg U (mere-equiv (Fin n))) X Y)
	    ( Path U X.1 Y.1)
	    ( SgPath-prop/Equiv' U
	      ( mere-equiv (Fin n))
	      ( \ Z. Prop-trunc/is-prop (Equiv (Fin n) Z)) X Y) k
	    ( is-htpy-finite/closed-Equiv
	      ( Path U X.1 Y.1)
	      ( Equiv X.1 Y.1)
	      ( univalence' X.1 Y.1) k
	      ( is-finite/is-htpy-finite 
		( Equiv X.1 Y.1)
		( is-finite/is-finite-Equiv X.1 Y.1
		  ( has-cardinality/is-finite X.1 (n, X.2))
		  ( has-cardinality/is-finite Y.1 (n, Y.2))) k)))
#+end_src
As homotopy finiteness is closed under equivalence, the result follows if we can show that Semigroup-of-Order and Semigroup-of-Order' are equivalent. First, we show that \Sigma (\Sigma_{(X: U)} is-set) || Fin n \simeq X || is equivalent to \Sigma_{(X: U)}|| Fin n \simeq X || (i.e., we remove a redundant information).
#+begin_src ctt
  Semigroup-of-Order/Equiv/map (n : Nat) (t : Sg (Sg U is-set) (\ X. mere-equiv (Fin n) X.1))
                                   : Sg U (mere-equiv (Fin n)) =
    (t.1.1, t.2)

  Semigroup-of-Order/Equiv/inv-map (n : Nat) (t : Sg U (mere-equiv (Fin n)))
                                       :  (Sg (Sg U is-set) (\ X. mere-equiv (Fin n) X.1)) =
    ( ( t.1, is-finite/is-set t.1 (has-cardinality/is-finite t.1 (n, t.2))),
      t.2)

  Semigroup-of-Order/Equiv/right-htpy (n : Nat) (t : Sg U (mere-equiv (Fin n)))
                                          : Path (Sg U (mere-equiv (Fin n)))
                                                 (Semigroup-of-Order/Equiv/map n (Semigroup-of-Order/Equiv/inv-map n t)) t =
    SgPath-prop U
      ( mere-equiv (Fin n))
      ( \ X. Prop-trunc/is-prop (Equiv (Fin n) X))
      ( Semigroup-of-Order/Equiv/map n (Semigroup-of-Order/Equiv/inv-map n t)) t
      ( refl U t.1)

  lock Prop-trunc/is-prop is-set/is-prop has-cardinality/is-finite is-finite/is-set
  Semigroup-of-Order/Equiv/left-htpy (n : Nat) (t : Sg (Sg U is-set) (\ X. mere-equiv (Fin n) X.1))
                                         : Path (Sg (Sg U is-set) (\ X. mere-equiv (Fin n) X.1))
                                                (Semigroup-of-Order/Equiv/inv-map n (Semigroup-of-Order/Equiv/map n t)) t =
    SgPath-prop (Sg U is-set)
      ( \ X. mere-equiv (Fin n) X.1)
      ( \ X. Prop-trunc/is-prop (Equiv (Fin n) X.1))
      ( Semigroup-of-Order/Equiv/inv-map n (Semigroup-of-Order/Equiv/map n t)) t
      ( SgPath-prop U
        ( is-set)
        ( is-set/is-prop)
        ( Semigroup-of-Order/Equiv/inv-map n (Semigroup-of-Order/Equiv/map n t)).1 t.1
        ( refl U t.1.1))

  Semigroup-of-Order/Equiv' (n : Nat) : Equiv (Sg (Sg U is-set) (\ X. mere-equiv (Fin n) X.1)) (Sg U (mere-equiv (Fin n))) =
    has-inverse/Equiv
      ( Sg (Sg U is-set) (\ X. mere-equiv (Fin n) X.1))
      ( Sg U (mere-equiv (Fin n)))
      ( Semigroup-of-Order/Equiv/map n)
      ( Semigroup-of-Order/Equiv/inv-map n,
        ( Semigroup-of-Order/Equiv/right-htpy n,
          Semigroup-of-Order/Equiv/left-htpy n))
#+end_src
Which straightforwardly implies the result.
#+begin_src ctt
  Semigroup-of-Order/Equiv (n : Nat) : Equiv (Semigroup-of-Order n) (Semigroup-of-Order' n) =
    Equiv/trans
      ( Semigroup-of-Order n)
      ( Sg (Sg (Sg U is-set) (\ X. mere-equiv (Fin n) X.1)) (\ t. has-assoc-op t.1.1))
      ( Semigroup-of-Order' n)
      ( Equiv/assoc-Sg
        ( Sg U is-set)
        ( \ X. has-assoc-op X.1)
        ( \ X. mere-equiv (Fin n) X.1))
      ( Sg/equiv-base
        ( Sg (Sg U is-set) (\ X. mere-equiv (Fin n) X.1))
        ( Sg U (mere-equiv (Fin n)))
        ( \ t. has-assoc-op t.1)
        ( Semigroup-of-Order/Equiv' n))      
  unlock Prop-trunc/is-prop is-set/is-prop has-cardinality/is-finite is-finite/is-set
#+end_src
Combining these facts, we can show that =Semigroup-of-Order n= is homotopy finite forall k \in Nat.
#+begin_src ctt
  Semigroup-of-Order/is-htpy-finite (n : Nat) (k : Nat) : is-htpy-finite k (Semigroup-of-Order n) =
    is-htpy-finite/closed-Equiv
      ( Semigroup-of-Order n)
      ( Semigroup-of-Order' n)
      ( Semigroup-of-Order/Equiv n) k
      ( is-htpy-finite/closed-Sg
	( Sg U (\ X. mere-equiv (Fin n) X))
	( \ X. has-assoc-op X.1) k
	( mere-equiv-Fin/is-htpy-finite n (suc k))
	( \ X. is-finite/is-htpy-finite
	      ( has-assoc-op X.1)
	      ( has-assoc-op/is-finite X.1
		( has-cardinality/is-finite X.1 (n, X.2))) k))
#+end_src
In particular, it has a finite amount of connected components.
#+begin_src ctt
  Semigroup-of-Order/has-finite-connected-components (n : Nat) : is-htpy-finite zero (Semigroup-of-Order n) =
    Semigroup-of-Order/is-htpy-finite n zero
#+end_src
Hence, we can compute the number of semigroups of order =n= up to isomorphism.
#+begin_src ctt
  number-of-Semigroup-of-Order (n : Nat) : Nat =
    card
      ( Set-trunc (Semigroup-of-Order n))
      ( Semigroup-of-Order/has-finite-connected-components n)
#+end_src

** Groups of order

Faithful to the definition of =Semigroup-of-Order n=, a group of order =n= is a group =G= such that there is a mere equivalence between =Fin n= and =G=.
#+begin_src ctt
  Group-of-Order (n : Nat) : U =
    Sg Group (\ G. mere-equiv (Fin n) (Group/type G))
#+end_src
Though, like =Semigroup-of-Order n=, we will show that it is equivalent to the following definition.
#+begin_src ctt
  Group-of-Order' (n : Nat) : U =
    Sg (Semigroup-of-Order n) (\ G. is-group G.1)
#+end_src
As we have already shown in the previous section that =Semigroup-of-Order n= is \pi_k-finite for k \in Nat, we show that =is-group= is finite whenever the underlying type is finite in two steps. First, we show that =is-unital= is finite.
#+begin_src ctt
  lock is-finite
  is-unital/is-finite (G : Semigroup) (H : is-finite (Semigroup/type G)) : is-finite (is-unital G) =
    is-finite/closed-Sg
      ( Semigroup/type G)
      ( \ e. (left-unit-law G e) * (right-unit-law G e)) H
      ( \ e. is-finite/closed-Prod
	    ( left-unit-law G e)
	    ( right-unit-law G e)
	    ( is-finite/Pi
	      ( Semigroup/type G)
	      ( \ y. Path (Semigroup/type G) (Semigroup/op G e y) y) H
	      ( \ y. is-decidable/is-finite
		    ( Path (Semigroup/type G) (Semigroup/op G e y) y)
		    ( Semigroup/is-set G (Semigroup/op G e y) y)
		    ( is-finite/has-decidable-equality
		      ( Semigroup/type G) H (Semigroup/op G e y) y)))
	    ( is-finite/Pi
	      ( Semigroup/type G)
	      ( \ x. Path (Semigroup/type G) (Semigroup/op G x e) x) H
	      ( \ x. is-decidable/is-finite
		    ( Path (Semigroup/type G) (Semigroup/op G x e) x)
		    ( Semigroup/is-set G (Semigroup/op G x e) x)
		    ( is-finite/has-decidable-equality
		      ( Semigroup/type G) H (Semigroup/op G x e) x))))
#+end_src
And then, we show that =is-group= is also finite.
#+begin_src ctt
  is-group/is-finite (G : Semigroup) (H : is-finite (Semigroup/type G)) : is-finite (is-group G) =
    is-finite/closed-Sg
      ( is-unital G)
      ( is-group' G)
    ( is-unital/is-finite G H)
    ( \ e. is-finite/closed-Sg
	  ( Semigroup/map G G)
	  ( \ i. ((x : Semigroup/type G) -> left-inv (G, e) x (i x)) * ((x : Semigroup/type G) -> right-inv (G, e) x (i x)))
	  ( is-finite/Pi
	    ( Semigroup/type G)
	    ( \ _. Semigroup/type G) H
	    ( \ _. H))
	  ( \ i. is-finite/closed-Prod
		( (x : Semigroup/type G) -> left-inv (G, e) x (i x))
		( (x : Semigroup/type G) -> right-inv (G, e) x (i x))
		( is-finite/Pi
		  ( Semigroup/type G)
		  ( \ x. left-inv (G, e) x (i x)) H
		  ( \ x. is-decidable/is-finite
			( Path (Semigroup/type G) (Semigroup/op G (i x) x) e.1)
			( Semigroup/is-set G (Semigroup/op G (i x) x) e.1)
			( is-finite/has-decidable-equality
			      ( Semigroup/type G) H (Semigroup/op G (i x) x) e.1)))
		( is-finite/Pi
		  ( Semigroup/type G)
		  ( \ x. left-inv (G, e) (i x) x) H
		  ( \ x. is-decidable/is-finite
			( Path (Semigroup/type G) (Semigroup/op G x (i x)) e.1)
			( Semigroup/is-set G (Semigroup/op G x (i x)) e.1)
			( is-finite/has-decidable-equality
			      ( Semigroup/type G) H (Semigroup/op G x (i x)) e.1)))))
#+end_src
As =Group-of-Order n= and =Group-of-Order' n= are equivalent:
#+begin_src ctt
  Group-of-Order/Equiv (n : Nat) : Equiv (Group-of-Order n) (Group-of-Order' n) =
    Equiv/assoc-Sg
      ( Semigroup)
      ( is-group)
      ( \ G. mere-equiv (Fin n) (Semigroup/type G))
#+end_src
we can show that Group-of-Order is \pi_k-finite for any k \in Nat.
#+begin_src ctt
  Group-of-Order/is-htpy-finite (n : Nat) (k : Nat) : is-htpy-finite k (Group-of-Order n) =
    is-htpy-finite/closed-Equiv
      ( Group-of-Order n)
      ( Group-of-Order' n)
      ( Group-of-Order/Equiv n) k
      ( is-htpy-finite/closed-Sg
	( Semigroup-of-Order n)
	( \ G. is-group G.1) k
	( Semigroup-of-Order/is-htpy-finite n (suc k))
	( \ G. is-finite/is-htpy-finite
	      ( is-group G.1)
	      ( is-group/is-finite G.1
		( has-cardinality/is-finite (Semigroup/type G.1) (n, G.2))) k))
#+end_src
In particular, it has a finite amount of connected components.
#+begin_src ctt
  Group-of-Order/has-finite-connected-components (n : Nat) : is-htpy-finite zero (Group-of-Order n) =
    Group-of-Order/is-htpy-finite n zero
#+end_src
Hence, we can compute the number of groups of finite order =n= up to isomorphism.
#+begin_src ctt
  number-of-Group-of-Order (n : Nat) : Nat =
    card
      ( Set-trunc (Group-of-Order n))
      ( Group-of-Order/has-finite-connected-components n)
#+end_src

#+RESULTS:
: Typecheck has succeeded.
