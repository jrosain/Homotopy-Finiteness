module Playground where

import GroupFiniteness

-- For a first try, we compute the number of finite types augmented with a binary operation.
Mul : U =
  Sg U (\ A. A -> A -> A)

Fin-Mul (n : Nat) : U =
  Sg Mul (\ m. mere-equiv (Fin n) m.1)

-- Of course, we inverse the order of the types.
Fin-Mul/Equiv (n : Nat) : Equiv (Fin-Mul n)
                                (Sg (Sg U (mere-equiv (Fin n))) (\ X. X.1 -> X.1 -> X.1)) =
  Equiv/assoc-Sg U
    ( \ A. A -> A -> A)
    ( mere-equiv (Fin n))
    
-- The number of multiplications is finite whenever its base type is finite.
is-finite-A-is-finite-mul (A : U) (H : is-finite A) : is-finite (A -> A -> A) =
  is-finite/Pi A
    ( \ _. A -> A) H
    ( \ _. is-finite/Pi A
          ( \ _. A) H
          ( \ _. H))

-- We have already shown that mere-equiv-Fin/is-htpy-finite.
Fin-Mul/has-finite-connected-components (n : Nat) : is-htpy-finite zero (Fin-Mul n) =
  is-htpy-finite/closed-Equiv
    ( Fin-Mul n)
    ( Sg (Sg U (mere-equiv (Fin n))) (\ X. X.1 -> X.1 -> X.1))
    ( Fin-Mul/Equiv n) zero
    ( is-htpy-finite/closed-Sg
      ( Sg U (mere-equiv (Fin n)))
      ( \ X. X.1 -> X.1 -> X.1) zero
      ( mere-equiv-Fin/is-htpy-finite n one-Nat)
      ( \ X. is-finite/is-htpy-finite
	    ( X.1 -> X.1 -> X.1)
	    ( is-finite-A-is-finite-mul X.1
	      ( has-cardinality/is-finite X.1 (n, X.2))) zero))

number-of-Fin-Mul (n : Nat) : Nat =
  card
    ( Set-trunc (Fin-Mul n))
    ( Fin-Mul/has-finite-connected-components n)

-- instantaneous
number-of-Fin-Mul-zero : Nat =
  number-of-Fin-Mul zero

number-of-Fin-Mul-one : Nat =
  number-of-Fin-Mul one-Nat

-- crashes
number-of-Fin-Mul-two : Nat =
  number-of-Fin-Mul two-Nat

Semigroup-of-Order/has-conn-components (n : Nat) : is-htpy-finite zero (Semigroup-of-Order n) =
  is-htpy-finite/closed-Equiv
    ( Semigroup-of-Order n)
    ( Semigroup-of-Order' n)
    ( Semigroup-of-Order/Equiv n) zero
    ( is-htpy-finite/closed-Sg/base
      ( Sg U (\ X. mere-equiv (Fin n) X))
      ( \ X. has-assoc-op X.1)
      ( mere-equiv-Fin/is-conn-Set-trunc n) 
      ( mere-equiv-Fin/is-htpy-finite n one-Nat)
      ( \ X. is-finite/is-htpy-finite
	    ( has-assoc-op X.1)
	    ( has-assoc-op/is-finite X.1
	      ( has-cardinality/is-finite X.1 (n, X.2))) zero))

-- instantaneous
number-of-Semigroup-of-Order-zero : Nat =
  card
  ( Set-trunc (Semigroup-of-Order zero))
  ( Semigroup-of-Order/has-conn-components zero)      

number-of-Semigroup-of-Order-one : Nat =
  card
  ( Set-trunc (Semigroup-of-Order one-Nat))
  ( Semigroup-of-Order/has-conn-components one-Nat)      

-- crashes
lock card Semigroup-of-Order/has-conn-components
number-of-Semigroup-of-Order-two : Nat =
  card
  ( Set-trunc (Semigroup-of-Order two-Nat))
  ( Semigroup-of-Order/has-conn-components two-Nat)

-- instantaneous  
number-of-Group-of-Order-zero : Nat =
  number-of-Group-of-Order zero

number-of-Group-of-Order-one : Nat =
  number-of-Group-of-Order one-Nat

-- crashes
number-of-Group-of-Order-two : Nat =
  number-of-Group-of-Order two-Nat
