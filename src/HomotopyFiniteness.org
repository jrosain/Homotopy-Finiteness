#+NAME: Homotopy Finiteness
#+AUTHOR: Johann Rosain

* Homotopy Finiteness

  #+begin_src ctt
  module HomotopyFiniteness where
  #+end_src

This file is a formalization of the proof presented by Rijke in his [[https://www.cirm-math.fr/RepOrga/2689/Slides/s_rijke_3.pdf][CIRM talk]] about the finiteness of groups of finite order /k/.

** Packages imports

   #+begin_src ctt
  import Lib.IsFinite
  import Lib.SetTrunc
   #+end_src

** Homotopy finite
A type =A= is said n^th-/homotopy finite/ if it has finitely many connected components and all its homotopy groups \pi_i(A, x) are finite, for every i \le n and /x : A/.
#+begin_src ctt
  is-htpy-finite' (A : U) : Nat -> U = split
    zero ->  is-finite
              ( Set-trunc A)
    suc k -> is-finite
              ( Set-trunc A) *
              ( (x y : A) -> is-htpy-finite' (Path A x y) k)

  is-htpy-finite (n : Nat) (A : U) : U =
    is-htpy-finite' A n
#+end_src

** Closure under equivalence
If =A= and =B= are equivalent, then whenever one of them is \pi_n finite, the other one is also \pi_n finite.
#+begin_src ctt
  is-htpy-finite/closed-Equiv/aux : (n : Nat) -> (A B : U) -> Equiv A B -> is-htpy-finite n B -> is-htpy-finite n A = split
    zero -> \ A B e.
      is-finite/closed-Equiv
        ( Set-trunc A)
        ( Set-trunc B)
        ( Set-trunc/Equiv A B e)
    suc n -> \ A B e is-htpy-finite-B.
      ( is-finite/closed-Equiv
          ( Set-trunc A)
          ( Set-trunc B)
          ( Set-trunc/Equiv A B e)
          ( is-htpy-finite-B.1),
        \ x y.
          is-htpy-finite/closed-Equiv/aux n
          ( Path A x y)
          ( Path B (Equiv/map A B e x) (Equiv/map A B e y))
          ( Equiv/Equiv-id A B e x y)
          ( is-htpy-finite-B.2
            ( Equiv/map A B e x)
            ( Equiv/map A B e y)))

  is-htpy-finite/closed-Equiv (A B : U) (e : Equiv A B) (n : Nat) (is-htpy-finite-B : is-htpy-finite n B) : is-htpy-finite n A =
    is-htpy-finite/closed-Equiv/aux n A B e is-htpy-finite-B

  is-htpy-finite/closed-Equiv' (A B : U) (e : Equiv A B) (n : Nat) (is-htpy-finite-A : is-htpy-finite n A) : is-htpy-finite n B =
    is-htpy-finite/closed-Equiv B A (Equiv/sym A B e) n is-htpy-finite-A
#+end_src
** TODO Equivalence of set-truncated function type
We show that if =A= is finite, then there is an equivalence between \Pi_{x: A}||B x||_0 and ||\Pi_{x: A} B x||_0. First, we show this result for =A = Fin k= by induction on /k/.
   * if /k = 0/, then both types are contractible. By the 3-for-2 property of contractibility, they are equivalent.
   * if /k > 0/, there is the following chain of equivalences:
     \Pi_{x: Fin (k + 1)}||B x||_0 \simeq \Pi_{x: Fin k}||B (inl x)||_0 \times ||B (inr star)||_0
                        \simeq ||\Pi_{x: Fin k} B (inl x)||_0 \times ||B (inr star)||_0
                        \simeq ||\Pi_{x: Fin (k + 1)}B x||_0
#+begin_src ctt
  Fin/Equiv-Pi-Set-trunc : (k : Nat) -> (B : Fin k -> U) -> Equiv ((x : Fin k) -> Set-trunc (B x)) (Set-trunc ((x : Fin k) -> B x)) = split
    zero -> 
#+end_src

#+RESULTS:
: Typecheck has succeeded.


** TODO Closure under \Pi-types
In this section, we show that if =B= is a family of \pi_n finite types over a finite type =A=, then the product \Pi_{x: A}B(x) is also \pi_{n}-finite.
We proceed by induction over =n=. 
   * If =n= is zero, then by is-finite/\Pi, is-finite (\Pi_{x: A}||B x||_0). Moreover, \Pi_{x: A}||B x||_0 is equivalent to ||\Pi_{x: A}B(x)||_0 and as is-finite is closed by equivalences, the result follows.
   * If =n > 0=, then it suffices to show that f \sim g is \pi_n finite by function extensionality and \pi_n-finiteness closure under equivalence. It then suffices to use the induction hypothesis.
#+begin_src ctt
  is-htpy-finite/closed-Pi (A : U) (B : A -> U) (is-finite-A : is-finite A)
                              : (n : Nat) -> (is-htpy-finite-B : (x : A) -> is-htpy-finite n (B x)) -> is-htpy-finite n ((x : A) -> B x) = split
  --  zero -> \ is-finite-B.
  --    is-finite/Pi A
  --      ( \ x. Set-trunc (B x)) is-finite-A is-finite-B

#+end_src

#+RESULTS:
: Typecheck has succeeded.

