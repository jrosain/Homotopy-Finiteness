#+NAME: Nat 
#+AUTHOR: Johann Rosain

* Natural numbers

  #+begin_src ctt
  module Lib.Data.Nat where
  #+end_src

The standard library provides the usual inductive definition of natural numbers using unary encoding. This file gives the induction principle of =Nat= together with some shortcuts.

#+begin_src ctt
  import Stdlib.Nat.Base
#+end_src

** Induction principle

#+begin_src ctt
  ind-Nat (P : Nat -> U) (pz : P zero) (ps : ((n : Nat) -> P n -> P (suc n))) : (n : Nat) -> P n = split
    zero -> pz
    suc n' -> ps n' (ind-Nat P pz ps n')
#+end_src

** Shortcuts

   #+begin_src ctt
  one-Nat : Nat = suc zero

  two-Nat : Nat = suc one-Nat

  three-Nat : Nat = suc two-Nat

  four-Nat : Nat = suc three-Nat

  five-Nat : Nat = suc four-Nat    
   #+end_src

#+RESULTS:
#+begin_example

Checking Definition: Nat
U
[Sum]

Checking Definition: ind-Nat
(P : Nat -> U) -> (pz : P zero) -> (ps : (n : Nat) -> P n -> P (suc n)) -> (n : Nat) -> P n
\ P. \ pz. \ ps. [Split]

Checking Definition: one-Nat
Nat
suc zero

Checking Definition: two-Nat
Nat
suc one-Nat

Checking Definition: three-Nat
Nat
suc two-Nat

Checking Definition: four-Nat
Nat
suc three-Nat

Checking Definition: five-Nat
Nat
suc four-Nat

Successfully checked 7 definitions
Evaluation of suc four-Nat
Yields suc (suc (suc (suc (suc zero))))
#+end_example
