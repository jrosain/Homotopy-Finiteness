#+TITLE: Quasi-inverses
#+NAME: QInv
#+AUTHOR: Johann Rosain 

* Quasi-inverses

  #+begin_src ctt
  module Lib.Data.QInv where
  #+end_src

This file defines the notion of /quasi-inverses/, that is, map that have an inverse, and provides accessors to the data-structure.

** Packages imports

The imported packages can be accessed via the following links:
   - [[file:Map.org][Lib/Data/Map]]
   #+begin_src ctt
  import Stdlib.Prelude
  import Lib.Data.Map
   #+end_src

** Definition

A map =f : A -> B= /has an inverse/ if there exists =g : B -> A= such that =f \circ g ~ id B= and =g \circ f ~ id A=. As such, the type of a *quasi-inverse* is a triple =(g, \alpha, \beta)= where =\alpha= and =\beta= are the two homotopies verifying that =g= is indeed an inverse of =f=.
   #+begin_src ctt
  has-inverse (A B : U) (f : A -> B) : U =
    Sg (B -> A) (\ g. (Htpy B (\ _. B) (map/comp B A B f g) (id B)) *
                      (Htpy A (\ _. A) (map/comp A B A g f) (id A)))
   #+end_src

** Accessors

   #+begin_src ctt
  QInv/map (A B : U) (f : A -> B) (i : has-inverse A B f) : B -> A =
    i.1

  QInv/right-htpy (A B : U) (f : A -> B) (i : has-inverse A B f) : Htpy B (\ _. B) (map/comp B A B f (QInv/map A B f i)) (id B) =
    i.2.1

  QInv/left-htpy (A B : U) (f : A -> B) (i : has-inverse A B f) : Htpy A (\ _. A) (map/comp A B A (QInv/map A B f i) f) (id A) =
    i.2.2
   #+end_src

#+RESULTS:
: Typecheck has succeeded.
