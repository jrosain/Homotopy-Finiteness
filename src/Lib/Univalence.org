#+TITLE: Univalence
#+NAME: Univalence
#+AUTHOR: Johann Rosain

* Univalence

  #+begin_src ctt
  module Lib.Univalence where
  #+end_src

This file shows the univalence and applies the fundamental theorem of identity to univalence.

** Packages imports

The imported packages can be accessed via the following links:
   - [[file:FundamentalTheorem.org][Lib/FundamentalTheorem]]
#+begin_src ctt
  import Stdlib.Prelude
  import Lib.FundamentalTheorem
#+end_src

** Fundamental theorem of univalence

We state the fundamental theorem of univalence, that is: the fundamental theorem of identity for equivalences.
#+begin_src ctt
  ua/is-contr-total-equiv (A : U) : is-contr (Sg U (Equiv A)) =
    let i : (B : U) -> has-inverse (Path U A B) (Equiv A B) (path-to-equiv A B) = \ B. (equiv-to-path A B, (equiv-to-path/comp A B, equiv-to-path/unique A B)) in
    fundamental-theorem-id' U
      ( Equiv A) A
      ( path-to-equiv A)
      ( \ B. has-inverse/is-equiv
              ( Path U A B)
              ( Equiv A B)
              ( path-to-equiv A B)
              ( i B))
#+end_src

** Equivalence between paths and equivalence
Path between types is equivalent to equivalence between types.
#+begin_src ctt
  univalence (A B : U) : Equiv (Equiv A B) (Path U A B) =
    has-inverse/Equiv
      ( Equiv A B)
      ( Path U A B)
      ( equiv-to-path A B)
      ( path-to-equiv A B,
        ( equiv-to-path/unique A B,
          equiv-to-path/comp A B))

  univalence' (A B : U) : Equiv (Path U A B) (Equiv A B) =
    has-inverse/Equiv
      ( Path U A B)
      ( Equiv A B)
      ( path-to-equiv A B)
      ( equiv-to-path A B,
        ( equiv-to-path/comp A B,
          equiv-to-path/unique A B))
#+end_src

#+RESULTS:
: Typecheck has succeeded.
