#+NAME: SubTypes
#+AUTHOR: Johann Rosain

* Subtypes

  #+begin_src ctt
  module Lib.SubTypes where
  #+end_src

This file defines subtypes and some properties associated to them.

** Packages imports

   #+begin_src ctt
  import Stdlib.Prelude
  import Lib.Prop.Equiv
  import Lib.Prop.Proposition
  import Lib.Prop.Levels
  import Lib.FundamentalTheorem
   #+end_src

** Definitions

   #+begin_src ctt
  is-subtype (X : U) (P : X -> U) : U = (x : X) -> is-prop (P x)

  is-decidable-subtype (X : U) (P : X -> U) : U = is-subtype X P * ((x : X) -> is-decidable (P x))
   #+end_src

** Equivalence of substructure

We show a lemma that helps us show that the identity type of a subtype agrees with the identity type of the original type.

#+begin_src ctt
  substructure/is-contr-total-Eq (A : U) (B C : A -> U) (is-contr-tot : is-contr (Sg A B)) (is-subtype-C : is-subtype A C) (a : A) (b : B a) (c : C a)
                                    : is-contr (Sg (Sg A C) (\ t. B t.1)) =
    is-contr/is-contr-equiv (Sg (Sg A C) (\ t. B t.1)) (Sg (Sg A B) (\ t. C t.1))
      (Equiv/assoc-Sg A C B)
      (is-contr/closed-retract (Sg (Sg A B) (\ t. C t.1)) (C a)
        (Sg/left-unit-law-is-contr (Sg A B) (\ t. C t.1) is-contr-tot (a, b))
        (is-prop/is-proof-irrelevant (C a) (is-subtype-C a) c))
#+end_src

** Equivalent subtypes
If =P= and =Q= are two subtypes of =A= such that there are back-and-forth maps between =P= and =Q=, then \Sigma A P is equivalent to \Sigma A Q.
      #+begin_src ctt
  subtype/Equiv-tot (A : U) (P Q : A -> U) (is-subtype-P : is-subtype A P) (is-subtype-Q : is-subtype A Q)
                    (f : (x : A) -> P x -> Q x) (g : (x : A) -> Q x -> P x) : Equiv (Sg A P) (Sg A Q) =
    fam-equiv/Equiv-tot A P Q f
      (\ x. Prop/is-equiv
            ( P x, is-subtype-P x)
            ( Q x, is-subtype-Q x)
            ( f x)
            ( g x))
      #+end_src

** A map is injective iff its fibrations are propositions
   #+begin_src ctt
  subtype/is-inj-prop-map (A B : U) (f : A -> B) (is-subtype-fib : (b : B) -> is-prop (Fib A B f b)) (x : A)
                               : (y : A) -> is-equiv (Path A x y) (Path B (f x) (f y)) (ap A B f x y) =
    fundamental-theorem-id 
      A
      ( \ y. Path B (f x) (f y)) x
      ( ap A B f x)
      ( is-prop/is-proof-irrelevant
        ( Fib A B f (f x))
        ( is-subtype-fib (f x))
        ( x, refl B (f x)))
   #+end_src

** Equivalence of =pr1=
We have shown that =fib pr1 x= is equivalent to =B x=. Then, whenever =B x= is a proposition for all =x=, =pr1= is an equivalence.
#+begin_src ctt
  pr1/is-inj (A : U) (B : A -> U) (is-prop-B : (x : A) -> is-prop (B x)) (t u : Sg A B)
                        : is-equiv (Path (Sg A B) t u) (Path A t.1 u.1) (ap (Sg A B) A (\ v. v.1) t u) =
    subtype/is-inj-prop-map
      ( Sg A B)
      A
      ( \ v. v.1)
      ( \ x. is-prop/closed-equiv
        ( Fib (Sg A B) A (\ v. v.1) x)
        ( B x)
        ( Equiv/fib-space-Equiv A B x)
        ( is-prop-B x))
      t u
#+end_src

#+RESULTS:
: Typecheck has succeeded.

