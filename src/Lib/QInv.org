#+NAME: QInv
#+AUTHOR: Johann Rosain

* Quasi-inverses

  #+begin_src ctt
  module Lib.QInv where
  #+end_src

In univalent mathematics, a map =f= is an equivalence (=is-equiv f=) if it has a left and right inverse (or, equivalently, if its fibers are contractible). This definition makes sense as in this case, =is-equiv f= is a proposition, that is, being an equivalence is a property of a map rather than a structure on the map. However, in practice, it is easier to use the /natural/ notion of equivalence: bijection. In HoTT, bijections are called *quasi-inverses*. This file defines this notion, and proves that a map is a quasi-inverse iff it is bi-invertible.

** Packages imports

   #+begin_src ctt
  import Lib.Data.BiInv  
   #+end_src

** Definition

A map =f : A -> B= /has an inverse/ if there exists =g : B -> A= such that =f \circ g ~ id B= and =g \circ f ~ id A=. As such, the type of a *quasi-inverse* is a triple =(g, \alpha, \beta)= where =\alpha= and =\beta= are the two homotopies verifying that =g= is indeed an inverse of =f=.
   #+begin_src ctt
  has-inverse (A B : U) (f : A -> B) : U =
    Sg (B -> A) (\ g. (Htpy B (\ _. B) (map/comp B A B f g) (id B)) *
                      (Htpy A (\ _. A) (map/comp A B A g f) (id A)))
   #+end_src

** Accessors

   #+begin_src ctt
  QInv/map (A B : U) (f : A -> B) (i : has-inverse A B f) : B -> A =
    i.1

  QInv/right-htpy (A B : U) (f : A -> B) (i : has-inverse A B f) : Htpy B (\ _. B) (map/comp B A B f (QInv/map A B f i)) (id B) =
    i.2.1

  QInv/left-htpy (A B : U) (f : A -> B) (i : has-inverse A B f) : Htpy A (\ _. A) (map/comp A B A (QInv/map A B f i) f) (id A) =
    i.2.2
   #+end_src

** Logical equivalence between quasi-inverses and bi-invertible maps

In this section, we focus on showing that =has-inverse f= is /logically equivalent/ to =is-bi-inv f= (that is, there is a map back and forth between the two types).

*** Map between quasi-inverse and bi-invertible

The map between =has-inverse f= and =is-bi-inv f= is trivial ; indeed, the map of a quasi-inverse is both the left and right inverse of =f=.

#+begin_src ctt
  has-inverse-is-bi-inv (A B : U) (f : A -> B) (i : has-inverse A B f) : is-bi-inv A B f =
    let g : B -> A = QInv/map A B f i in
    ( (g, QInv/right-htpy A B f i),
      (g, QInv/left-htpy A B f i))
#+end_src

*** Map between bi-invertible and quasi-inverse

It is not obvious as to why bi-invertible maps are quasi-inverses, but actually, the right inverse is also a left inverse: we can build a homotopy =K : g ~ h= as follows:
#+begin_center
g(y) = h(f(g(y))) as H : h \circ f ~ id
     = h(y)       as G : f \circ g ~ id
#+end_center
Thus, we have that:
#+begin_center
g(f(x)) = h(f(x)) as K : g ~ h
        = x       as H : h \circ f ~ id
#+end_center

#+begin_src ctt
  is-bi-inv-has-inverse (A B : U) (f : A -> B) (b : is-bi-inv A B f) : has-inverse A B f =
    let g : B -> A = BiInv/right-inv A B f b in
    let h : B -> A = BiInv/left-inv A B f b in
    let G : Htpy B (\ _. B) (map/comp B A B f g) (id B) = BiInv/right-htpy A B f b in
    let H : Htpy A (\ _. A) (map/comp A B A h f) (id A) = BiInv/left-htpy A B f b in
    let K : Htpy B (\ _. A) g h = \ y. comp A (g y) (h (f (g y)))
                                            (inv A (h (f (g y))) (g y) (H (g y)))
                                            (h y)
                                            (ap B A h (f (g y)) y (G y)) in
    (g, G,
      \ x. comp A (g (f x)) (h (f x))
                (K (f x))
                x (H x))
#+end_src

** Inverse of a bi-invertible map

This result allows us to give (i) an inverse to a bi-invertible map that is (ii) also a bi-invertible map.

*** Inverse map
    #+begin_src ctt
  BiInv/inv-map (A B : U) (f : A -> B) (b : is-bi-inv A B f) : B -> A =
    QInv/map A B f (is-bi-inv-has-inverse A B f b)
    #+end_src

*** Bi-invertibility of inverse map
    #+begin_src ctt
  BiInv/inv-is-bi-inv (A B : U) (f : A -> B) (b : is-bi-inv A B f) : is-bi-inv B A (BiInv/inv-map A B f b) =
    let g : B -> A = BiInv/inv-map A B f b in
    let left-htpy : Htpy A (\ _. A) (map/comp A B A g f) (id A) = QInv/left-htpy A B f (is-bi-inv-has-inverse A B f b) in
    has-inverse-is-bi-inv B A g
      (f, (left-htpy, BiInv/right-htpy A B f b))
    #+end_src

#+RESULTS:
: Typecheck has succeeded.
