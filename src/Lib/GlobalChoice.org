#+TITLE: Principle of Global Choice
#+AUTHOR: Johann Rosain

* The Principle of Global Choice

  #+begin_src ctt
  module Lib.GlobalChoice where
  #+end_src

The principle of /global choice/ states that, from an inhabitant of the propositional truncation of a type, one can get an inhabitant of the type. This file defines this notion, and exhibits some conditions for a type to satisfy the principle of global choice.

** Packages imports

The imported packages can be accessed via the following links:
   - [[file:PropTrunc.org][Lib/PropTrunc]]
   - [[file:Prop/Fin.org][Lib/Prop/Fin]]
   - [[file:Prop/Nat.org][Lib/Prop/Nat]]
   #+begin_src ctt
  import Lib.PropTrunc
  import Lib.Prop.Fin
  import Lib.Prop.Nat
   #+end_src

** Principle of Global Choice

   #+begin_src ctt
  global-choice (A : U) : U =
    Prop-trunc A -> A
   #+end_src

** Decidable subtype of natural numbers implies global choice
In this section, we show that if P is a subtype of Nat such that each P(n) is decidable, then \Sigma_{n: Nat}P(n) satisfies the principle of global choice. For this, we use the [[file:Prop/Nat.org][well-ordering principle]]. The first thing we need to do is to show that \Sigma_{(n: Nat)}P(n) \times is-lower-bound_P(n) is a proposition.
#+begin_src ctt
  well-ordering/is-prop (P : Nat -> U) (H : (n : Nat) -> is-prop (P n)) : is-prop (Sg Nat (\ n. (P n) * (is-lower-bound P n))) =
    \ t u.
      SgPath-prop Nat
	( \ n. (P n) * (is-lower-bound P n))
	( \ n. is-prop/prod
	      ( P n)
	      ( is-lower-bound P n)
	      ( H n)
	      ( is-prop/pi Nat
		( \ x. P x -> Prop/type (le n x))
		( \ x. is-prop/pi
		      ( P x)
		      ( \ _. Prop/type (le n x))
		      ( \ _. Prop/is-prop (le n x))))) t u
	( le/is-antisymmetric t.1 u.1
	  ( t.2.2 u.1 u.2.1)
	  ( u.2.2 t.1 t.2.1))            

  well-ordering/Prop (P : Nat -> UU-Prop) : UU-Prop =
    ( Sg Nat (\ n. (Prop/type (P n)) * (is-lower-bound (\ x. Prop/type (P x)) n)),
      well-ordering/is-prop
      ( \ x. Prop/type (P x))
      ( \ x. Prop/is-prop (P x)))
#+end_src
By the recursion principle of propositional truncation, there is a map between || \Sigma_{(x: Nat)}P(x) || to \Sigma_{(x: Nat)}P(x) \times is-lower-bound_P(x).
#+begin_src ctt
  well-ordering/map (P : Nat -> UU-Prop) (H : (x : Nat) -> is-decidable (Prop/type (P x)))
		       : Prop-trunc (Sg Nat (\ x. Prop/type (P x)))
			-> Sg Nat (\ n. (Prop/type (P n)) * (is-lower-bound (\ x. Prop/type (P x)) n)) =
    rec-Prop-trunc
      ( Sg Nat (\ x. Prop/type (P x)))
      ( well-ordering/Prop P)
      ( well-ordering-principle
	( \ x. Prop/type (P x)) H)  
#+end_src
Hence, there's a map out of the propositional truncation of \Sigma_{(x: Nat)}P(x).
#+begin_src ctt
  Nat-decidable-subtype/global-choice (P : Nat -> UU-Prop) (H : (x : Nat) -> is-decidable (Prop/type (P x)))
					 : global-choice (Sg Nat (\ x. Prop/type (P x))) =
    \ p.
      let t : Sg Nat (\ n. (Prop/type (P n)) * (is-lower-bound (\ x. Prop/type (P x)) n)) = well-ordering/map P H p in
      ( t.1, t.2.1)
#+end_src
As a corollary, any decidable subtype over =Fin k= also satisfies the global choice. Indeed, we have the equivalence \Sigma_{(x: Fin k)}P(x) \simeq \Sigma_{(n: Nat)}\Sigma_{(p: n<k)}P(e(n, p)). We must show that it is still a decidable proposition. It is not a problem, as both < and P are decidable propositions.
#+begin_src ctt
  Fin-Nat-family/is-prop (k : Nat) (P : Fin k -> UU-Prop) (n : Nat)
			    : is-prop (Fin-Nat-family k (\ x. Prop/type (P x)) n) =
    \ t u. SgPath-prop
	  ( Prop/type (lt n k))
	  ( \ p. Prop/type (P (Fin/from-classical-Fin k (n, p))))
	  ( \ p. Prop/is-prop (P (Fin/from-classical-Fin k (n, p)))) t u
	  ( Prop/is-prop (lt n k) t.1 u.1)

  Fin-Nat-family/Prop (k : Nat) (P : Fin k -> UU-Prop) (n : Nat) : UU-Prop =
    ( Fin-Nat-family k (\ x. Prop/type (P x)) n,
      Fin-Nat-family/is-prop k P n)

  Fin-Nat-family/is-decidable'' (k : Nat) (P : Fin k -> UU-Prop) (n : Nat) (p : Prop/type (lt n k))
				   : Coprod (Prop/type (P (Fin/from-classical-Fin k (n, p))))
					    (neg (Prop/type (P (Fin/from-classical-Fin k (n, p)))))
				    -> is-decidable (Fin-Nat-family k (\ x. Prop/type (P x)) n) = split
    inl x -> inl (p, x)
    inr np -> inr (\ t. np
		      ( tr
			( Prop/type (lt n k)) t.1 p
			( Prop/is-prop (lt n k) t.1 p)
			( \ q. Prop/type (P (Fin/from-classical-Fin k (n, q)))) t.2))

  Fin-Nat-family/is-decidable' (k : Nat) (P : Fin k -> UU-Prop)
			       (d : (x : Fin k) -> is-decidable (Prop/type (P x)))
			       (n : Nat)
				  : Coprod (Prop/type (lt n k)) (neg (Prop/type (lt n k)))
				   -> is-decidable (Fin-Nat-family k (\ x. Prop/type (P x)) n) = split
    inl p -> Fin-Nat-family/is-decidable'' k P n p (d (Fin/from-classical-Fin k (n, p)))
    inr nlt -> inr (\ t. nlt t.1)

  Fin-Nat-family/is-decidable (k : Nat) (P : Fin k -> UU-Prop)
			      (d : (x : Fin k) -> is-decidable (Prop/type (P x)))
			      (n : Nat)
				 : is-decidable (Fin-Nat-family k (\ x. Prop/type (P x)) n) =
    Fin-Nat-family/is-decidable' k P d n
      ( lt/is-decidable n k)
#+end_src
As such, we can show the result.
#+begin_src ctt
  decidable-subtype/global-choice' (k : Nat) (P : Fin k -> UU-Prop)
				   (d : (x : Fin k) -> is-decidable (Prop/type (P x)))
				      : global-choice (Sg (Fin k) (\ x. Prop/type (P x))) =
    \ p.
      Equiv/inv-map
	( Sg (Fin k) (\ x. Prop/type (P x)))
	( Sg Nat (Fin-Nat-family k (\ x. Prop/type (P x))))
	( Fin-Nat-family/Equiv k (\ x. Prop/type (P x)))
	( Nat-decidable-subtype/global-choice
	  ( Fin-Nat-family/Prop k P)
	  ( Fin-Nat-family/is-decidable k P d)
	  ( Prop-trunc/map 
	    ( Sg (Fin k) (\ x. Prop/type (P x)))
	    ( Sg Nat (Fin-Nat-family k (\ x. Prop/type (P x))))
	    ( Equiv/map 
	      ( Sg (Fin k) (\ x. Prop/type (P x)))
	      ( Sg Nat (Fin-Nat-family k (\ x. Prop/type (P x))))
	      ( Fin-Nat-family/Equiv k (\ x. Prop/type (P x)))) p))
#+end_src
A more useful statement for this lemma is as follows:
#+begin_src ctt
  decidable-subtype/global-choice (A : U) (k : Nat) (e : Equiv (Fin k) A) (P : A -> UU-Prop)
				  (d : (x : A) -> is-decidable (Prop/type (P x)))
				     : global-choice (Sg A (\ x. Prop/type (P x))) =
    \ p.
      let B : Fin k -> UU-Prop = \ x. P (Equiv/map (Fin k) A e x) 
	  f : Fin k -> A = Equiv/map (Fin k) A e
	  g : A -> Fin k = Equiv/inv-map (Fin k) A e
	  u : Sg (Fin k) (\ x. Prop/type (B x)) = decidable-subtype/global-choice' k B
			    ( \ x. d (f x))
			    ( rec-Prop-trunc
			      ( Sg A (\ x. Prop/type (P x)))
			      ( Prop-trunc/Prop (Sg (Fin k) (\ x. Prop/type (B x))))
			      ( \ t. Prop-trunc/unit
				    ( g t.1, tr A t.1 (f (g t.1))
					       ( inv A (f (g t.1)) t.1 (Equiv/inv-right-htpy (Fin k) A e t.1))
					       ( \ x. Prop/type (P x)) t.2)) p)
      in
    ( f u.1, u.2)    
#+end_src
Another result would be:
#+begin_src ctt
  count/global-choice (A : U) : (k : Nat) (e : Equiv (Fin k) A) -> global-choice A = split
    zero -> \ e a.
	ex-falso A
	( rec-Prop-trunc A
	  ( Empty/Prop)
	  ( \ x. Equiv/inv-map Empty A e x) a)
    suc k ->
      \ e _. Equiv/map (Fin (suc k)) A e (zero-Fin k)
#+end_src

#+RESULTS:
: Typecheck has succeeded.
