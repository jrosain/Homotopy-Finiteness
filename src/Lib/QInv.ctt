module Lib.QInv where

import Lib.Data.BiInv
import Lib.Data.QInv

has-inverse-is-bi-inv (A B : U) (f : A -> B) (i : has-inverse A B f) : is-bi-inv A B f =
  let g : B -> A = QInv/map A B f i in
  ( (g, QInv/right-htpy A B f i),
    (g, QInv/left-htpy A B f i))

is-bi-inv-has-inverse (A B : U) (f : A -> B) (b : is-bi-inv A B f) : has-inverse A B f =
  let g : B -> A = is-bi-inv/right-inv A B f b in
  let h : B -> A = is-bi-inv/left-inv A B f b in
  let G : Htpy B (\ _. B) (map/comp B A B f g) (id B) = is-bi-inv/right-htpy A B f b in
  let H : Htpy A (\ _. A) (map/comp A B A h f) (id A) = is-bi-inv/left-htpy A B f b in
  let K : Htpy B (\ _. A) g h = \ y. comp A (g y) (h (f (g y)))
                                          (inv A (h (f (g y))) (g y) (H (g y)))
                                          (h y)
                                          (ap B A h (f (g y)) y (G y)) in
  (g, G,
    \ x. comp A (g (f x)) (h (f x))
              (K (f x))
              x (H x))

is-bi-inv/inv-map (A B : U) (f : A -> B) (b : is-bi-inv A B f) : B -> A =
  QInv/map A B f (is-bi-inv-has-inverse A B f b)

is-bi-inv/inv-right-htpy (A B : U) (f : A -> B) (b : is-bi-inv A B f) : Htpy B (\ _. B) (map/comp B A B f (is-bi-inv/inv-map A B f b)) (id B) =
  QInv/right-htpy A B f (is-bi-inv-has-inverse A B f b)

is-bi-inv/inv-left-htpy (A B : U) (f : A -> B) (b : is-bi-inv A B f) : Htpy A (\ _. A) (map/comp A B A (is-bi-inv/inv-map A B f b) f) (id A) =
  QInv/left-htpy A B f (is-bi-inv-has-inverse A B f b)

is-bi-inv/inv-is-bi-inv (A B : U) (f : A -> B) (b : is-bi-inv A B f) : is-bi-inv B A (is-bi-inv/inv-map A B f b) =
  let g : B -> A = is-bi-inv/inv-map A B f b in
  let left-htpy : Htpy A (\ _. A) (map/comp A B A g f) (id A) = QInv/left-htpy A B f (is-bi-inv-has-inverse A B f b) in
  has-inverse-is-bi-inv B A g
    (f, (left-htpy, is-bi-inv/right-htpy A B f b))
