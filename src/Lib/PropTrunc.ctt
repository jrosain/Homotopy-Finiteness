module Lib.PropTrunc where

import Lib.Prop.Proposition

precomp-Prop (A : U) (P : UU-Prop) (f : A -> (Prop/type P)) (Q : UU-Prop) (g : Prop/hom P Q) : A -> Prop/type Q =
  \ z. g (f z)

is-prop-trunc (A : U) (P : UU-Prop) (f : A -> (Prop/type P)) : U =
  (Q : UU-Prop) -> is-equiv (Prop/hom P Q) (A -> Prop/type Q) (precomp-Prop A P f Q)

is-prop-trunc/map (A : U) (P : UU-Prop) (f : A -> Prop/type P) (H : is-prop-trunc A P f) (Q : UU-Prop) (g : A -> Prop/type Q) : Prop/hom P Q =
  (H Q g).1.1

prop-trunc/has-ext-prop (A : U) (P : UU-Prop) (f : A -> Prop/type P) : U =
  (Q : UU-Prop) -> (A -> Prop/type Q) -> (Prop/hom P Q)

has-ext-property/is-prop-trunc (A : U) (P : UU-Prop) (f : A -> Prop/type P) (H : prop-trunc/has-ext-prop A P f) : is-prop-trunc A P f =
  \ Q.
    Prop/is-equiv
      (Prop/hom P Q, is-prop/pi (Prop/type P) (\ _. Prop/type Q) (\ _. Prop/is-prop Q))
      (A -> Prop/type Q, is-prop/pi A (\ _. Prop/type Q) (\ _. Prop/is-prop Q))
      (precomp-Prop A P f Q)
      (H Q)

data Prop-trunc (A : U) : U
  = Prop-trunc/unit (a : A)
  | Prop-trunc/squash (u v : Prop-trunc A) <i> [(i=0) -> u, (i=1) -> v]

Prop-trunc/is-prop (A : U) : is-prop (Prop-trunc A) =
  \ x y i. Prop-trunc/squash x y i

Prop-trunc/Prop (A : U) : UU-Prop =
  (Prop-trunc A, Prop-trunc/is-prop A)

rec-Prop-trunc (A : U) (P : UU-Prop) (f : A -> Prop/type P) : Prop-trunc A -> Prop/type P = split
  Prop-trunc/unit a -> f a
  Prop-trunc/squash x y i -> (Prop/is-prop P) (rec-Prop-trunc A P f x) (rec-Prop-trunc A P f y) i

Prop-trunc/is-prop-trunc (A : U) : is-prop-trunc A (Prop-trunc/Prop A) (\ a. Prop-trunc/unit a) =
  has-ext-property/is-prop-trunc A (Prop-trunc/Prop A) (\ a. Prop-trunc/unit a) (\ Q. rec-Prop-trunc A Q)

Prop-trunc/map (A B : U) (f : A -> B) : (Prop-trunc A) -> Prop-trunc B =
  is-prop-trunc/map A (Prop-trunc/Prop A) (\ a. Prop-trunc/unit a) (Prop-trunc/is-prop-trunc A)
    (Prop-trunc/Prop B) (\ a. Prop-trunc/unit (f a))

Equiv/Prop-trunc-map (A B : U) (e : Equiv A B) : (Prop-trunc A) -> Prop-trunc B =
  Prop-trunc/map A B (Equiv/map A B e)

Equiv/Prop-trunc-inv-map (A B : U) (e : Equiv A B) : (Prop-trunc B) -> Prop-trunc A =
  Prop-trunc/map B A (Equiv/inv-map A B e)  

Equiv/Prop-trunc (A B : U) (e : Equiv A B) : Equiv (Prop-trunc A) (Prop-trunc B) =
  Prop/Equiv (Prop-trunc/Prop A) (Prop-trunc/Prop B) (Equiv/Prop-trunc-map A B e) (Equiv/Prop-trunc-inv-map A B e)
