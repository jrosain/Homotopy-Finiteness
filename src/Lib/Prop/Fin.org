#+TITLE: Standard Finite Types Properties
#+NAME: Fin
#+AUTHOR: Johann Rosain

* =Fin= Properties

  #+begin_src ctt
  module Lib.Prop.Fin where
  #+end_src

This file states and shows more properties about finite types.

** Packages imports

The imported packages can be accessed via the following links:
   - [[../Data/Fin.org][Lib/Data/Fin]]
   - [[file:Coprod.org][Lib/Prop/Coprod]]
   - [[file:Equiv.org][Lib/Prop/Equiv]]
   #+begin_src ctt
  import Lib.Data.Fin
  import Lib.Prop.Coprod
  import Lib.Prop.Equiv
   #+end_src

** =Fin k + l= is =Fin k + Fin l=

The proof is easy by induction on =l=.
   #+begin_src ctt
  Fin/Equiv-add-copr (k : Nat) : (l : Nat) -> (Equiv (Fin (plus-Nat k l)) (Coprod (Fin k) (Fin l))) = split
    zero -> Equiv/sym (Coprod (Fin k) Empty) (Fin k) (Equiv/Equiv-copr-type-empty (Fin k))
    suc l -> Equiv/trans (Fin (plus-Nat k (suc l))) (Coprod (Coprod (Fin k) (Fin l)) Unit) (Coprod (Fin k) (Fin (suc l)))
                                                   (Coprod/closed-Equiv (Fin (plus-Nat k l)) (Coprod (Fin k) (Fin l)) Unit Unit
                                                                        (Fin/Equiv-add-copr k l) (Equiv/refl Unit))
                                                   (Coprod/assoc (Fin k) (Fin l) Unit)
   #+end_src

