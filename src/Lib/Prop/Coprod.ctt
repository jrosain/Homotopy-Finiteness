module Lib.Prop.Coprod where

import Lib.Data.Coprod
import Stdlib.Prelude
import Lib.Prop.Htpy
import Lib.Prop.Equiv
import Lib.FundamentalTheorem

Coprod/id-htpy (A B : U) : Htpy' (Coprod A B) (Coprod A B) (Coprod/map A B A B (id A) (id B)) (id (Coprod A B)) = split
  inl x -> refl (Coprod A B) (inl x)
  inr y -> refl (Coprod A B) (inr y)

Coprod/comp-fun-htpy (A A' A'' : U) (B B' B'' : U) (f : A -> A') (f' : A' -> A'') (g : B -> B') (g' : B' -> B'')
                               : Htpy' (Coprod A B) (Coprod A'' B'')
                                       (Coprod/map A B A'' B'' (\ z. f' (f z)) (\ z. g' (g z)))
                                       (\ z. (Coprod/map A' B' A'' B'' f' g') (Coprod/map A B A' B' f g z)) = split
  inl x -> refl (Coprod A'' B'') (inl (f' (f x)))
  inr y -> refl (Coprod A'' B'') (inr (g' (g y)))

Coprod/copr-htpy (A A' : U) (B B' : U) (f f' : A -> A') (g g' : B -> B') (H : Htpy' A A' f f') (K : Htpy' B B' g g')
                       : Htpy' (Coprod A B) (Coprod A' B') (Coprod/map A B A' B' f g) (Coprod/map A B A' B' f' g') = split
  inl x -> ap A' (Coprod A' B') (\ z. inl z) (f x) (f' x) (H x)
  inr y -> ap B' (Coprod A' B') (\ z. inr z) (g y) (g' y) (K y)

Coprod/closed-is-equiv-map (A A' B B' : U) (f : A -> A') (g : B -> B') : Coprod A B -> Coprod A' B' =
  Coprod/map A B A' B' f g  

Coprod/closed-is-equiv-inv-map (A A' B B' : U) (f : A -> A') (g : B -> B') (e : is-equiv A A' f) (e' : is-equiv B B' g)
                                          : Coprod A' B' -> Coprod A B =
  let f' : A' -> A = is-equiv/inv-map A A' f e
      g' : B' -> B = is-equiv/inv-map B B' g e'
  in Coprod/map A' B' A B f' g'

Coprod/closed-is-equiv-right-htpy (A A' B B' : U) (f : A -> A') (g : B -> B') (e : is-equiv A A' f) (e' : is-equiv B B' g)
                                             : Htpy' (Coprod A' B') (Coprod A' B')
                                                     (\ z. (Coprod/closed-is-equiv-map A A' B B' f g) (Coprod/closed-is-equiv-inv-map A A' B B' f g e e' z))
                                                     (id (Coprod A' B')) =
  let f' : A' -> A = is-equiv/inv-map A A' f e
      g' : B' -> B = is-equiv/inv-map B B' g e'
      H : Htpy' A' A' (\ z. f (f' z)) (id A') = is-equiv/inv-right-htpy A A' f e
      H' : Htpy' B' B' (\ z. g (g' z)) (id B') = is-equiv/inv-right-htpy B B' g e'
  in
  Htpy'/comp (Coprod A' B') (Coprod A' B') (\ z. (Coprod/closed-is-equiv-map A A' B B' f g) (Coprod/closed-is-equiv-inv-map A A' B B' f g e e' z))
                                           (Coprod/map A' B' A' B' (\ z. f (f' z)) (\ z. g (g' z))) (id (Coprod A' B'))
                                           (Htpy'/inv (Coprod A' B') (Coprod A' B') (Coprod/map A' B' A' B' (\ z. f (f' z)) (\ z. g (g' z)))
                                                      (\ z. (Coprod/closed-is-equiv-map A A' B B' f g) (Coprod/closed-is-equiv-inv-map A A' B B' f g e e' z))
                                                      (Coprod/comp-fun-htpy A' A A' B' B B' f' f g' g))
                                           (Htpy'/comp (Coprod A' B') (Coprod A' B')
                                                       (Coprod/map A' B' A' B' (\ z. f (f' z)) (\ z. g (g' z)))
                                                       (Coprod/map A' B' A' B' (id A') (id B')) (id (Coprod A' B'))
                                                       (Coprod/copr-htpy A' A' B' B' (\ z. f (f' z)) (id A') (\ z. g (g' z)) (id B') H H')
                                                       (Coprod/id-htpy A' B'))

Coprod/closed-is-equiv-left-htpy (A A' B B' : U) (f : A -> A') (g : B -> B') (e : is-equiv A A' f) (e' : is-equiv B B' g)
                                            : Htpy' (Coprod A B) (Coprod A B)
                                                     (\ z. (Coprod/closed-is-equiv-inv-map A A' B B' f g e e') (Coprod/closed-is-equiv-map A A' B B' f g z))
                                                     (id (Coprod A B)) =
  let f' : A' -> A = is-equiv/inv-map A A' f e
      g' : B' -> B = is-equiv/inv-map B B' g e'
      K : Htpy' A A (\ z. f' (f z)) (id A) = is-equiv/inv-left-htpy A A' f e
      K' : Htpy' B B (\ z. g' (g z)) (id B) = is-equiv/inv-left-htpy B B' g e'
  in
  Htpy'/comp (Coprod A B) (Coprod A B) (\ z. (Coprod/closed-is-equiv-inv-map A A' B B' f g e e') (Coprod/closed-is-equiv-map A A' B B' f g z))
                                       (Coprod/map A B A B (\ z. f' (f z)) (\ z. g' (g z))) (id (Coprod A B))
                                           (Htpy'/inv (Coprod A B) (Coprod A B) (Coprod/map A B A B (\ z. f' (f z)) (\ z. g' (g z)))
                                                      (\ z. (Coprod/closed-is-equiv-inv-map A A' B B' f g e e') (Coprod/closed-is-equiv-map A A' B B' f g z))
                                                      (Coprod/comp-fun-htpy A A' A B B' B f f' g g'))
                                           (Htpy'/comp (Coprod A B) (Coprod A B)
                                                       (Coprod/map A B A B (\ z. f' (f z)) (\ z. g' (g z)))
                                                       (Coprod/map A B A B (id A) (id B)) (id (Coprod A B))
                                                       (Coprod/copr-htpy A A B B (\ z. f' (f z)) (id A) (\ z. g' (g z)) (id B) K K')
                                                       (Coprod/id-htpy A B))

Coprod/closed-is-equiv (A A' B B' : U) (f : A -> A') (g : B -> B') (e : is-equiv A A' f) (e' : is-equiv B B' g)
                                  : is-equiv (Coprod A B) (Coprod A' B') (Coprod/closed-is-equiv-map A A' B B' f g) =
  has-inverse/is-equiv (Coprod A B) (Coprod A' B') (Coprod/closed-is-equiv-map A A' B B' f g)
    (Coprod/closed-is-equiv-inv-map A A' B B' f g e e',
      (Coprod/closed-is-equiv-right-htpy A A' B B' f g e e',
       Coprod/closed-is-equiv-left-htpy A A' B B' f g e e'))

Coprod/closed-Equiv (A A' B B' : U) (e : Equiv A A') (e' : Equiv B B') : Equiv (Coprod A B) (Coprod A' B') =
  (Coprod/closed-is-equiv-map A A' B B' (Equiv/map A A' e) (Equiv/map B B' e'),
    Coprod/closed-is-equiv A A' B B' (Equiv/map A A' e) (Equiv/map B B' e') (Equiv/is-equiv A A' e) (Equiv/is-equiv B B' e'))

Coprod/assoc-map (A B C : U) : (Coprod (Coprod A B) C) -> (Coprod A (Coprod B C)) = split
  inl c -> ind-Coprod A B (\ _. Coprod A (Coprod B C)) (\ x. inl x) (\ y. inr (inl y)) c
  inr z -> inr (inr z)

Coprod/assoc-inv-map (A B C : U) : (Coprod A (Coprod B C)) -> Coprod (Coprod A B) C = split
  inl x -> inl (inl x)
  inr a -> ind-Coprod B C (\ _. Coprod (Coprod A B) C) (\ y. inl (inr y)) (\ z. inr z) a

Coprod/assoc-right-htpy (A B C : U) : Htpy' (Coprod A (Coprod B C)) (Coprod A (Coprod B C))
                                            (\ z. (Coprod/assoc-map A B C) (Coprod/assoc-inv-map A B C z))
                                            (id (Coprod A (Coprod B C))) = split
  inl x -> refl (Coprod A (Coprod B C)) (inl x)
  inr a -> ind-Coprod B C (\ x. Path (Coprod A (Coprod B C)) ((Coprod/assoc-map A B C) (Coprod/assoc-inv-map A B C (inr x))) (inr x))
                         (\ y. refl (Coprod A (Coprod B C)) (inr (inl y))) (\ z. refl (Coprod A (Coprod B C)) (inr (inr z))) a

Coprod/assoc-left-htpy (A B C : U) : Htpy' (Coprod (Coprod A B) C) (Coprod (Coprod A B) C)
                                           (\ z. (Coprod/assoc-inv-map A B C) (Coprod/assoc-map A B C z))
                                           (id (Coprod (Coprod A B) C)) = split
  inl c -> ind-Coprod A B (\ z. Path (Coprod (Coprod A B) C) ((Coprod/assoc-inv-map A B C) (Coprod/assoc-map A B C (inl z))) (inl z))
                         (\ x. refl (Coprod (Coprod A B) C) (inl (inl x))) (\ y. refl (Coprod (Coprod A B) C) (inl (inr y))) c
  inr z -> refl (Coprod (Coprod A B) C) (inr z)

Coprod/assoc-is-equiv (A B C : U) : is-equiv (Coprod (Coprod A B) C) (Coprod A (Coprod B C)) (Coprod/assoc-map A B C) =
  has-inverse/is-equiv (Coprod (Coprod A B) C) (Coprod A (Coprod B C)) (Coprod/assoc-map A B C)
    (Coprod/assoc-inv-map A B C, (Coprod/assoc-right-htpy A B C, Coprod/assoc-left-htpy A B C))

Coprod/assoc (A B C : U) : Equiv (Coprod (Coprod A B) C) (Coprod A (Coprod B C)) =
  (Coprod/assoc-map A B C, Coprod/assoc-is-equiv A B C)

Coprod/Eq-inl (A B : U) (a : A) : Coprod A B -> U = split
  inl x -> Path A a x
  inr _ -> Empty

Coprod/Eq-inr (A B : U) (b : B) : Coprod A B -> U = split
  inl _ -> Empty
  inr y -> Path B b y

Coprod/Eq (A B : U) : Coprod A B -> Coprod A B -> U = split
  inl a -> Coprod/Eq-inl A B a
  inr b -> Coprod/Eq-inr A B b

Coprod/Eq/refl (A B : U) : (x : Coprod A B) -> Coprod/Eq A B x x = split
  inl y -> refl A y
  inr z -> refl B z

Coprod/Eq/is-contr (A B : U) : (s : Coprod A B) -> is-contr (Sg (Coprod A B) (Coprod/Eq A B s)) = split
  inl x -> is-contr/is-contr-equiv (Sg (Coprod A B) (Coprod/Eq A B (inl x))) (Sg A (\ y. Path A x y))
            (Equiv/trans (Sg (Coprod A B) (Coprod/Eq A B (inl x))) (Coprod (Sg A (\ y. Path A x y)) (B * Empty)) (Sg A (\ y. Path A x y))
              (Equiv/Sg-distr-over-coprod A B (Coprod/Eq A B (inl x)))
              (Equiv/trans (Coprod (Sg A (\ y. Path A x y)) (B * Empty)) (Coprod (Sg A (\ y. Path A x y)) Empty) (Sg A (\ y. Path A x y))
                (Coprod/closed-Equiv (Sg A (\ y. Path A x y)) (Sg A (\ y. Path A x y)) (B * Empty) Empty (Equiv/refl (Sg A (\ y. Path A x y))) (Equiv/Sg-empty B))
                (Equiv/Equiv-copr-type-empty (Sg A (\ y. Path A x y)))))
            (is-contr/Sg-path-is-contr A x)
  inr y -> is-contr/is-contr-equiv (Sg (Coprod A B) (Coprod/Eq A B (inr y))) (Sg B (\ z. Path B y z))
            (Equiv/trans (Sg (Coprod A B) (Coprod/Eq A B (inr y))) (Coprod (A * Empty) (Sg B (\ z. Path B y z))) (Sg B (\ z. Path B y z))
              (Equiv/Sg-distr-over-coprod A B (Coprod/Eq A B (inr y)))
              (Equiv/trans (Coprod (A * Empty) (Sg B (\ z. Path B y z))) (Coprod Empty (Sg B (\ z. Path B y z))) (Sg B (\ z. Path B y z))
                (Coprod/closed-Equiv (A * Empty) Empty (Sg B (\ z. Path B y z)) (Sg B (\ z. Path B y z))
                  (Equiv/Sg-empty A) (Equiv/refl (Sg B (\ z. Path B y z))))
                (Equiv/Equiv-copr-empty-type (Sg B (\ z. Path B y z)))))
            (is-contr/Sg-path-is-contr B y)

Coprod/Eq/eq-map (A B : U) (s : Coprod A B) : (t : Coprod A B) -> Path (Coprod A B) s t -> Coprod/Eq A B s t = split
  inl x -> \ p. J (Coprod A B) (inl x) (\ t _. Coprod/Eq A B t (inl x)) (refl A x) s (inv (Coprod A B) s (inl x) p)
  inr y -> \ p. J (Coprod A B) (inr y) (\ t _. Coprod/Eq A B t (inr y)) (refl B y) s (inv (Coprod A B) s (inr y) p)

Coprod/Eq/is-equiv-eq-map (A B : U) (s t : Coprod A B) : is-equiv (Path (Coprod A B) s t) (Coprod/Eq A B s t) (Coprod/Eq/eq-map A B s t) =
  fundamental-theorem-id (Coprod A B) (Coprod/Eq A B s) s (Coprod/Eq/eq-map A B s) (Coprod/Eq/is-contr A B s) t

Coprod/Eq/map (A B : U) (s t : Coprod A B) : Coprod/Eq A B s t -> Path (Coprod A B) s t =
  is-equiv/inv-map (Path (Coprod A B) s t) (Coprod/Eq A B s t) (Coprod/Eq/eq-map A B s t) (Coprod/Eq/is-equiv-eq-map A B s t)

Coprod/inl-inj (A B : U) (x y : A) (p : Path (Coprod A B) (inl x) (inl y)) : Path A x y =
  Coprod/Eq/eq-map A B (inl x) (inl y) p

Coprod/inr-inj (A B : U) (x y : B) (p : Path (Coprod A B) (inr x) (inr y)) : Path B x y =
  Coprod/Eq/eq-map A B (inr x) (inr y) p
