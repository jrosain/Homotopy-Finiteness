#+NAME: Sg
#+AUTHOR: Johann Rosain

* \Sigma Properties

  #+begin_src ctt
  module Lib.Prop.Sg where
  #+end_src

This file proves some useful basic facts on \Sigma-types.

** Packages imports

   #+begin_src ctt
  import Stdlib.Prelude
  import Lib.Prop.MiscPaths
   #+end_src

** Induction principle

   #+begin_src ctt
  ind-Sg (A : U) (B : A -> U) (P : Sg A B -> U) (g : (x : A) (y : B x) -> P(x, y)) : (z : Sg A B) -> P z =
    \ z. g z.1 z.2
   #+end_src

** Accessors

   #+begin_src ctt
  pr1 (A : U) (B : A -> U) (u : Sg A B) : A = u.1
  pr2 (A : U) (B : A -> U) (u : Sg A B) : B (pr1 A B u) = u.2
   #+end_src

** Properties

*** \Sigma-Path implies subpaths

Let =u, v= be \Sigma-types such that =u = v=. Then, by path induction, we have =p : u.1 = v.1= and =(tr p u.2) = v.2=.
#+begin_src ctt
  Sg-path/left (A : U) (B : A -> U) (u v : Sg A B) (p : Path (Sg A B) u v) : Path A u.1 v.1 =
    J (Sg A B) u (\ w _. Path A u.1 w.1) (refl A u.1) v p

  -- Sg-path/right (A : U) (B : A -> U) (u v : Sg A B) (p : Path (Sg A B) u v)
  --   : PathO A u.1 v.1 (Sg-path/left A B u v p) B u.2 v.2 =
  --   J (Sg A B) u (\ w q. Path (B w.1) (tr A u.1 w.1 (Sg-path/left A B u w q) B u.2) w.2) (refl (tr A u.1 u.1 (refl A u.1) B u.2) u.2) v p
#+end_src

*** Closed retract
If =B, C= are type families over =A= and =B= a retract of =C=, then \Sigma A B is also a retract of \Sigma A C.
#+begin_src ctt
  Sg/closed-retract (A : U) (B C : A -> U) (H : (x : A) -> retract-of (B x) (C x)) : retract-of (Sg A B) (Sg A C) =
    let s : Sg A B -> Sg A C = \ u. (u.1, (H u.1).1 u.2)
        r : Sg A C -> Sg A B = \ u. (u.1, (H u.1).2.1 u.2) in
    (s, (r, \ u. SgPathO->PathSg A B (r (s u)) u (refl A u.1, PathO/refl A u.1 B (r (s u)).2 u.2 ((H u.1).2.2 u.2))))
#+end_src

#+RESULTS:
: Typecheck has succeeded.
