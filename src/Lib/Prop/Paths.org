#+TITLE: Paths Properties
#+NAME: Paths
#+AUTHOR: Johann Rosain

* Paths properties

  #+begin_src ctt
  module Lib.Prop.Paths where
  #+end_src

This file contains properties on paths.

** Packages imports

The imported packages can be accessed via the following links:
   - [[../Data/Map.org][Lib/Data/Map]]
   - [[../Data/Nat.org][Lib/Data/Nat]]
   - [[file:Comp.org][Lib/Prop/Comp]]
   - [[file:Set.org][Lib/Prop/Set]]
   #+begin_src ctt
  import Lib.Data.Map
  import Lib.Data.Nat
  import Lib.Prop.Comp
  import Lib.Prop.Set
   #+end_src

** Transport of refl

#+begin_src ctt
  tr/refl-path (A : U) (x : A) (P : A -> U) (u : P x) : Path (P x) (tr A x x (refl A x) P u) u =
    \ i. tr/refl A x P i u

  tr/refl-path' (A : U) (x : A) (P : A -> U) (u : P x) : Path (P x) u (tr A x x (refl A x) P u) =
    inv
      ( P x)
      ( tr A x x (refl A x) P u) u
      ( tr/refl-path A x P u)
#+end_src

It generalizes using J.
#+begin_src ctt
  tr/path (A : U) (x y : A) (p : Path A x y) (P : U) (u : P) : Path P (tr A x y p (\ _. P) u) u =
    J A x (\ z q. Path P (tr A x z q (\ _. P) u) u) (tr/refl-path A x (\ _. P) u) y p

  tr/inv-path (A : U) (x y : A) (p : Path A x y) (P : U) (u : P) : Path P u (tr A x y p (\ _. P) u) =
    inv P (tr A x y p (\ _. P) u) u (tr/path A x y p P u)
#+end_src

#+RESULTS:
: Typecheck has succeeded.
** Transport of refl with \Sigma

#+begin_src ctt
  PathO/refl (A : U) (x : A) (P : A -> U) (u v : P x) (q : Path (P x) u v) : PathO A x x (refl A x) P u v =
    comp (P x) (tr A x x (refl A x) P u) u (tr/refl-path A x P u) v q
#+end_src
** Transport identity
The transportation on =inv p= then on =p= is the reflexive transportation.
   #+begin_src ctt
  tr/right-inv/refl (A : U) (B : A -> U) (x : A) (y : B x)
                       :  Path (B x) (tr A x x (refl A x) B (tr A x x (inv A x x (refl A x)) B y)) y =
    comp-n (B x) three-Nat (tr A x x (refl A x) B (tr A x x (inv A x x (refl A x)) B y)) (tr A x x (inv A x x (refl A x)) B y)
      (tr/refl-path A x B (tr A x x (inv A x x (refl A x)) B y)) (tr A x x (refl A x) B y)
      (ap (Path A x x) (B x) (\ p. (tr A x x p B y)) (inv A x x (refl A x)) (refl A x)
          (inv/refl A x))
      y (tr/refl-path A x B y)

  tr/right-inv (A : U) (B : A -> U) (u v : Sg A B) (p : Path A u.1 v.1)
                  : Path (B v.1) (tr A u.1 v.1 p B (tr A v.1 u.1 (inv A u.1 v.1 p) B v.2)) v.2 =
    J A u.1 (\ x q. (y : B x) -> Path (B x) (tr A u.1 x q B (tr A x u.1 (inv A u.1 x q) B y)) y)
      (\ y. tr/right-inv/refl A B u.1 y) v.1 p v.2
   #+end_src
It goes the same for left inverse.
#+begin_src ctt
  tr/left-inv/refl (A : U) (B : A -> U) (x : A) (y : B x)
                       :  Path (B x) (tr A x x (inv A x x (refl A x)) B (tr A x x (refl A x) B y)) y =
    comp-n (B x) three-Nat (tr A x x (inv A x x (refl A x)) B (tr A x x (refl A x) B y)) (tr A x x (refl A x) B (tr A x x (refl A x) B y))
      (ap (Path A x x) (B x) (\ p. (tr A x x p B (tr A x x (refl A x) B y))) (inv A x x (refl A x)) (refl A x)
          (inv/refl A x))
      (tr A x x (refl A x) B y)
      (tr/refl-path A x B (tr A x x (refl A x) B y)) 
      y (tr/refl-path A x B y)

  tr/left-inv (A : U) (B : A -> U) (u v : Sg A B) (p : Path A u.1 v.1)
                 : Path (B u.1) (tr A v.1 u.1 (inv A u.1 v.1 p) B (tr A u.1 v.1 p B u.2)) u.2 =
    J A u.1 (\ x q. Path (B u.1) (tr A x u.1 (inv A u.1 x q) B (tr A u.1 x q B u.2)) u.2)
      (tr/left-inv/refl A B u.1 u.2) v.1 p
#+end_src
** inv is involutive

   #+begin_src ctt
  inv/involutive (A : U) (x y : A) (p : Path A x y) : Path (Path A x y) (inv A y x (inv A x y p)) p =
    J A x (\ z q. Path (Path A x z) (inv A z x (inv A x z q)) q)
          (comp (Path A x x) (inv A x x (inv A x x (refl A x))) (inv A x x (refl A x))
                (ap (Path A x x) (Path A x x) (\ q. inv A x x q) (inv A x x (refl A x)) (refl A x) (inv/refl A x))
                (refl A x) (inv/refl A x)) y p

  inv/involutive' (A : U) (x y : A) (p : Path A x y) : Path (Path A x y) p (inv A y x (inv A x y p)) =
    inv (Path A x y) (inv A y x (inv A x y p)) p (inv/involutive A x y p)
   #+end_src

#+RESULTS:
: Typecheck has succeeded.
** Dependent AP
    #+begin_src ctt
  apd (A : U) (B : A -> U) (f : (x : A) -> B x) (x y : A) (p : Path A x y) : Path (B y) (tr A x y p B (f x)) (f y) =
    J A x (\ z q. Path (B z) (tr A x z q B (f x)) (f z)) (tr/refl-path A x B (f x)) y p
    #+end_src
** Identity
=ap id= is =id= for paths.
#+begin_src ctt
  ap/id (A : U) (x y : A) (p : Path A x y) : Path (Path A x y) p (ap A A (id A) x y p) =
    J A x (\ y' q. Path (Path A x y') q (ap A A (id A) x y' q))
          (refl (Path A x x) (refl A x)) y p

  ap/id' (A : U) (x y : A) (p : Path A x y) : Path (Path A x y) (ap A A (id A) x y p) p =
    inv (Path A x y) p (ap A A (id A) x y p) (ap/id A x y p)
#+end_src
=ap id= is also clearly bi-invertible.
#+begin_src ctt
  is-bi-inv/ap-id-inv-htpy (A : U) (x y : A) : Htpy' (Path A x y) (Path A x y) (\ p. (ap A A (id A) x y) (ap A A (id A) x y p)) (id (Path A x y)) =
    \ p. comp (Path A x y) ((ap A A (id A) x y) (ap A A (id A) x y p)) (ap A A (id A) x y p)
                          (ap/id' A x y (ap A A (id A) x y p)) p (ap/id' A x y p)

  is-bi-inv/ap-id-is-bi-inv (A : U) (x y : A) : is-bi-inv (Path A x y) (Path A x y) (ap A A (id A) x y) =
    ((ap A A (id A) x y, is-bi-inv/ap-id-inv-htpy A x y), (ap A A (id A) x y, is-bi-inv/ap-id-inv-htpy A x y))
#+end_src
A useful lemma is that =tr whatever ap id= is also bi-invertible.
#+begin_src ctt
  is-bi-inv/ap-eq-id (A : U) (f : A -> A) (p : Path (A -> A) (id A) f) (x y : A)
                        : is-bi-inv (Path A x y) (Path A (f x) (f y)) (ap A A f x y) =
    tr (A -> A) (id A) f p (\ h. is-bi-inv (Path A x y) (Path A (h x) (h y)) (ap A A h x y))
      (is-bi-inv/ap-id-is-bi-inv A x y)    
#+end_src
** Composition
ap g \circ ap f is ap (g \circ f).
#+begin_src ctt
  ap/comp (A B C : U) (f : A -> B) (g : B -> C) (x y : A) (p : Path A x y)
                 : Path (Path C (g (f x)) (g (f y))) (ap B C g (f x) (f y) (ap A B f x y p)) (ap A C (map/comp A B C g f) x y p) =
    J A x (\ z q. Path (Path C (g (f x)) (g (f z))) (ap B C g (f x) (f z) (ap A B f x z q)) (ap A C (map/comp A B C g f) x z q))
          (refl (Path C (g (f x)) (g (f x))) (refl C (g (f x)))) y p

  ap/comp' (A B C : U) (f : A -> B) (g : B -> C) (x y : A) (p : Path A x y)
                 : Path (Path C (g (f x)) (g (f y))) (ap A C (map/comp A B C g f) x y p) (ap B C g (f x) (f y) (ap A B f x y p)) =
    inv (Path C (g (f x)) (g (f y))) (ap B C g (f x) (f y) (ap A B f x y p)) (ap A C (map/comp A B C g f) x y p) (ap/comp A B C f g x y p)
#+end_src
** Inverse
ap f p^-1 is (ap f p)^-1.
#+begin_src ctt
  ap/refl/refl (A B : U) (f : A -> B) (x : A) : Path (Path B (f x) (f x)) (ap A B f x x (inv A x x (refl A x)))
                                                                         (ap A B f x x (refl A x)) =
    ap (Path A x x) (Path B (f x) (f x)) (ap A B f x x) (inv A x x (refl A x)) (refl A x) (inv/refl A x)

  ap/inv (A B : U) (f : A -> B) (x y : A) (p : Path A x y)
              : Path (Path B (f y) (f x)) (ap A B f y x (inv A x y p)) (inv B (f x) (f y) (ap A B f x y p)) =
    J A x (\ z q. Path (Path B (f z) (f x)) (ap A B f z x (inv A x z q)) (inv B (f x) (f z) (ap A B f x z q)))
          (comp (Path B (f x) (f x)) (ap A B f x x (inv A x x (refl A x)))
                                     (ap A B f x x (refl A x)) (ap/refl/refl A B f x)
                                     (inv B (f x) (f x) (refl B (f x))) (refl/sym B (f x))) y p
#+end_src
** Path between identifiable functions
    #+begin_src ctt
  ap/eq (A B : U) (f g : A -> B) (p : Path (A -> B) f g) (x y : A) : Path ((Path A x y) -> Path B (g x) (g y)) (tr (A -> B) f g p (\ h. Path A x y -> Path B (h x) (h y)) (ap A B f x y))
                                                                        (ap A B g x y) =
    apd (A -> B) (\ h. Path A x y -> Path B (h x) (h y)) (\ h. ap A B h x y) f g p
    #+end_src
** Path concatenation
=ap f (comp p q)= is =comp (ap f p) (ap f q)=.
#+begin_src ctt
  ap/concat (A B : U) (f : A -> B) (x y z : A) (p : Path A x y) (q : Path A y z)
                 : Path (Path B (f x) (f z)) (ap A B f x z (comp A x y p z q))
                                           (comp B (f x) (f y) (ap A B f x y p) (f z) (ap A B f y z q)) =
    J A y (\ t r. Path (Path B (f x) (f t)) (ap A B f x t (comp A x y p t r))
                                            (comp B (f x) (f y) (ap A B f x y p) (f t) (ap A B f y t r)))
              (comp (Path B (f x) (f y)) (ap A B f x y (comp A x y p y (refl A y)))
                                         (ap A B f x y p) (ap (Path A x y) (Path B (f x) (f y)) (ap A B f x y) (comp A x y p y (refl A y)) p (comp/ident-r A x y p))
                                         (comp B (f x) (f y) (ap A B f x y p) (f y) (refl B (f y))) (refl/comp-r B (f x) (f y) (ap A B f x y p)))
      z q
#+end_src
** Closure under homotopies
We show that if f \sim g, then =ap f= and =ap g= can be used in further computations, by something called the /naturality square/. We proceed by path induction and need to use the composition properties of =Prelude= as the judgmental equality in cubical is different than judgmental equality of HoTT.
#+begin_src ctt
  naturality (A B : U) (f g : A -> B) (H : Htpy' A B f g) (x y : A) (p : Path A x y)
                  : Path (Path B (f x) (g y)) (comp B (f x) (g x) (H x) (g y) (ap A B g x y p))
                                              (comp B (f x) (f y) (ap A B f x y p) (g y) (H y)) =
    J A x (\ z q. Path (Path B (f x) (g z)) (comp B (f x) (g x) (H x) (g z) (ap A B g x z q))
                                           (comp B (f x) (f z) (ap A B f x z q) (g z) (H z)))
          (comp (Path B (f x) (g x)) (comp B (f x) (g x) (H x) (g x) (refl B (g x))) (H x)
                                     (comp/ident-r B (f x) (g x) (H x)) (comp B (f x) (f x) (refl B (f x)) (g x) (H x))
                                     (comp/ident-l' B (f x) (g x) (H x))) y p

  naturality' (A B : U) (f g : A -> B) (H : Htpy' A B f g) (x y : A) (p : Path A x y)
                   : Path (Path B (f x) (g y)) (comp B (f x) (f y) (ap A B f x y p) (g y) (H y))
                                               (comp B (f x) (g x) (H x) (g y) (ap A B g x y p)) =
    inv (Path B (f x) (g y)) (comp B (f x) (g x) (H x) (g y) (ap A B g x y p)) (comp B (f x) (f y) (ap A B f x y p) (g y) (H y))
        (naturality A B f g H x y p)
#+end_src
** Squares
    #+begin_src ctt
  square (A : U) (x y1 y2 z : A) (p-left : Path A x y1) (p-bottom : Path A y1 z) (p-top : Path A x y2) (p-right : Path A y2 z) : U =
    Path (Path A x z)
      ( comp A x y1 p-left z p-bottom)
      ( comp A x y2 p-top z p-right)

  square-top (A : U) (x y1 y2 z : A) (p1 : Path A x y1) (q1 : Path A y1 z) (p2 : Path A x y2) (p2' : Path A x y2) (s : Path (Path A x y2) p2 p2') (q2 : Path A y2 z)
             (sq : square A x y1 y2 z p1 q1 p2 q2) : square A x y1 y2 z p1 q1 p2' q2 =
    J
      ( Path A x y2) p2
      ( \ p _. square A x y1 y2 z p1 q1 p q2) sq p2' s    
    #+end_src

#+RESULTS:
: Typecheck has succeeded.
** =f= and =ap f= through homotopy
Using this naturality square, we can show that if H : f \sim id, then H(f(x)) = ap_f(H(x)). Indeed:
H (f x) = H (f x) . H x . H x^-1
        = H (f x) . ap id (H x) . H x^-1
        = ap f (H x) . (H x) . (H x)^-1
        = ap f (H x)
#+begin_src ctt
  nat-htpy (A : U) (f : A -> A) (H : Htpy' A A f (id A)) (x : A)
              : Path (Path A (f (f x)) (f x))
                     (H (f x)) (ap A A f (f x) x (H x)) =
    comp-n
      ( Path A (f (f x)) (f x)) eight-Nat
      ( H (f x)) (comp A (f (f x)) (f x) (H (f x)) (f x) (refl A (f x)))
      ( refl/comp-r A (f (f x)) (f x) (H (f x)))
      ( comp A (f (f x)) (f x) (H (f x)) (f x) (comp A (f x) x (H x) (f x) (inv A (f x) x (H x))))
      ( ap (Path A (f x) (f x)) (Path A (f (f x)) (f x)) (\ p. (comp A (f (f x)) (f x) (H (f x)) (f x) p)) (refl A (f x)) (comp A (f x) x (H x) (f x) (inv A (f x) x (H x)))
        ( comp/inv-r' A (f x) x (H x)))
      ( comp A (f (f x)) x (comp A (f (f x)) (f x) (H (f x)) x (H x)) (f x) (inv A (f x) x (H x)))
      ( comp/assoc' A (f (f x)) (f x) (H (f x)) x (H x) (f x) (inv A (f x) x (H x)))
      ( comp A (f (f x)) x (comp A (f (f x)) (f x) (H (f x)) x (ap A A (id A) (f x) x (H x))) (f x) (inv A (f x) x (H x)))
      ( ap (Path A (f x) x) (Path A (f (f x)) (f x)) (\ p. comp A (f (f x)) x (comp A (f (f x)) (f x) (H (f x)) x p) (f x) (inv A (f x) x (H x))) (H x) (ap A A (id A) (f x) x (H x))
        ( ap/id A (f x) x (H x)))
      ( comp A (f (f x)) x (comp A (f (f x)) (f x) (ap A A f (f x) x (H x)) x (H x)) (f x) (inv A (f x) x (H x)))
      ( ap (Path A (f (f x)) x) (Path A (f (f x)) (f x)) (\ p. comp A (f (f x)) x p (f x) (inv A (f x) x (H x)))
        ( comp A (f (f x)) (f x) (H (f x)) x (ap A A (id A) (f x) x (H x))) (comp A (f (f x)) (f x) (ap A A f (f x) x (H x)) x (H x))
        ( naturality A A f (id A) H (f x) x (H x)))
      ( comp A (f (f x)) (f x) (ap A A f (f x) x (H x)) (f x) (comp A (f x) x (H x) (f x) (inv A (f x) x (H x))))
      ( comp/assoc A (f (f x)) (f x) (ap A A f (f x) x (H x)) x (H x) (f x) (inv A (f x) x (H x)))
      ( comp A (f (f x)) (f x) (ap A A f (f x) x (H x)) (f x) (refl A (f x)))
      ( ap (Path A (f x) (f x)) (Path A (f (f x)) (f x)) (\ p. comp A (f (f x)) (f x) (ap A A f (f x) x (H x)) (f x) p) (comp A (f x) x (H x) (f x) (inv A (f x) x (H x))) (refl A (f x))
        ( comp/inv-r A (f x) x (H x)))
      ( ap A A f (f x) x (H x))
      ( comp/ident-r A (f (f x)) (f x) (ap A A f (f x) x (H x)))

  nat-htpy' (A : U) (f : A -> A) (H : Htpy' A A f (id A)) (x : A)
               : Path (Path A (f (f x)) (f x))
                      (ap A A f (f x) x (H x)) (H (f x)) =
    inv
      ( Path A (f (f x)) (f x))
      ( H (f x))
      ( ap A A f (f x) x (H x))
      ( nat-htpy A f H x)
#+end_src
** =ap f (H x)= and =G (f x)=
Let f : A \to B and g : B \to A such that G : f \circ g \sim id and H : g \circ f \sim id. Then there is a G' : g \circ f \sim id such that ap f (H x) = G' (f x).
#+begin_src ctt
  htpy/half-adjoint/htpy (A B : U) (f : A -> B) (g : B -> A) (G : Htpy' B B (\ y. f (g y)) (id B)) (H : Htpy' A A (\ x. g (f x)) (id A)) (y : B)
                              : Path B (f (g y)) y =
    comp B
      ( f (g y))
      ( f (g (f (g y))))
      ( inv B (f (g (f (g y)))) (f (g y)) (G (f (g y)))) y
      ( comp B
        ( f (g (f (g y))))
        ( f (g y))
        ( ap A B f (g (f (g y))) (g y) (H (g y))) y
        ( G y))

  htpy/half-adjoint (A B : U) (f : A -> B) (g : B -> A) (G : Htpy' B B (\ y. f (g y)) (id B)) (H : Htpy' A A (\ x. g (f x)) (id A)) (x : A)
                         : Path (Path B (f (g (f x))) (f x)) (ap A B f (g (f x)) x (H x)) (htpy/half-adjoint/htpy A B f g G H (f x)) =
    inv/concat B
      ( f (g (f (g (f x)))))
      ( f (g (f x)))
      ( G (f (g (f x))))
      ( f x)
      ( ap A B f (g (f x)) x (H x))
      ( comp B
        ( f (g (f (g (f x)))))
        ( f (g (f x)))
        ( ap A B f (g (f (g (f x)))) (g (f x)) (H (g (f x))))
        ( f x)
        ( G (f x)))
      ( square-top B
        ( f (g (f (g (f x)))))
        ( f (g (f x)))
        ( f (g (f x)))
        ( f x)
        ( G (f (g (f x))))     
        ( ap A B f (g (f x)) x (H x))
        ( ap A B (\ z. (f (g (f z)))) (g (f x)) x (H x))
        ( ap A B f (g (f (g (f x)))) (g (f x)) (H (g (f x))))
        ( comp 
          ( Path B (f (g (f (g (f x))))) (f (g (f x))))
          ( ap A B (\ z. (f (g (f z)))) (g (f x)) x (H x))
          ( ap A B f (g (f (g (f x)))) (g (f x)) (ap A A (\ z. g (f z)) (g (f x)) x (H x)))
          ( ap/comp' A A B
            ( \ z. g (f z)) f
            ( g (f x)) x
            ( H x))
          ( ap A B f (g (f (g (f x)))) (g (f x)) (H (g (f x))))
          ( ap
            ( Path A (g (f (g (f x)))) (g (f x)))
            ( Path B (f (g (f (g (f x))))) (f (g (f x))))
            ( ap A B f (g (f (g (f x)))) (g (f x)))
            ( ap A A (\ z. g (f z)) (g (f x)) x (H x))
            ( H (g (f x)))
            ( nat-htpy' A (\ z. g (f z)) H x)))
          ( G (f x))
          ( naturality A B (\ z. f (g (f z))) f (\ z. G (f z)) (g (f x)) x (H x)))

  htpy/half-adjoint' (A B : U) (f : A -> B) (g : B -> A) (G : Htpy' B B (\ y. f (g y)) (id B)) (H : Htpy' A A (\ x. g (f x)) (id A)) (x : A)
                          : Path (Path B (f (g (f x))) (f x)) (htpy/half-adjoint/htpy A B f g G H (f x)) (ap A B f (g (f x)) x (H x)) =
    inv 
      ( Path B (f (g (f x))) (f x))
      ( ap A B f (g (f x)) x (H x))
      ( htpy/half-adjoint/htpy A B f g G H (f x))
      ( htpy/half-adjoint A B f g G H x)
#+end_src

#+RESULTS:
: Typecheck has succeeded.
** Closure of bi-invertibility 
This result is in =ContrMap.org=.

** Transport of =ap=
We show that tr_P(ap_f(p)) \sim tr_{P \circ f}(p).
#+begin_src ctt
  tr/ap/refl (A B : U) (f : A -> B) (P : B -> U) (x : A) (u : P (f x))
                  : Path (P (f x)) (tr B (f x) (f x) (ap A B f x x (refl A x)) P u) (tr A x x (refl A x) (\ z. P (f z)) u) =
    comp
      ( P (f x)) 
      ( tr B (f x) (f x) (ap A B f x x (refl A x)) P u) u
      ( tr/refl-path B (f x) P u)
      ( tr A x x (refl A x) (\ z. P (f z)) u)
      ( tr/refl-path' A x (\ z. P (f z)) u)

  tr/ap (A B : U) (f : A -> B) (P : B -> U) (x y : A) (p : Path A x y) (u : P (f x))
             : Path (P (f y)) (tr B (f x) (f y) (ap A B f x y p) P u) (tr A x y p (\ z. P (f z)) u) =
    J A x
      ( \ z q. Path (P (f z)) (tr B (f x) (f z) (ap A B f x z q) P u) (tr A x z q (\ z'. P (f z')) u))
      ( tr/ap/refl A B f P x u) y p
#+end_src

** Filling of dependent square of a set
Let a_0, a_1 : A and p, q : a_0 = a_1 such that \alpha : p = q. We have a full square with sides (refl a_0), (refl a_1), p, q. Assume now that B : A -> Set, and b_0 : B a_0, b_1 : B a_1 with p', q' : b_0 = b_1 (dependent paths). Then we can fill the square in B, that is, p' = q'.
#+begin_src ctt
  square/dependent-fill/refl (A : U) (B : A -> UU-Set) (x : A) (x' : A) (p : Path A x x') (y : Set/type (B x)) (y' : Set/type (B x'))
                             (p' q' : PathP (i. Set/type (B (p i))) y y') : Path (PathP (i. Set/type (B (p i))) y y') p' q' =
    J A x
      ( \ x0 q. (y0 : Set/type (B x)) -> (y1 : Set/type (B x0)) -> (p0 q0 : PathP (i. Set/type (B (q i))) y0 y1) -> Path (PathP (i. Set/type (B (q i))) y0 y1) p0 q0)
      ( Set/is-set (B x)) x' p y y' p' q'

  square/dependent-fill (A : U) (B : A -> UU-Set) (x x' : A) (p : Path A x x') : (q : Path A x x') -> (spq : Path (Path A x x') p q) ->
                        (y : Set/type (B x)) -> (y' : Set/type (B x')) -> (p' : PathP (i. Set/type (B (p i))) y y') -> (q' : PathP (i. Set/type (B (q i))) y y')
                        -> PathP (i. PathP (j. Set/type (B (spq i j))) y y') p' q' =
    J ( Path A x x') p
      ( \ q'' spq0. (y0 : Set/type (B x)) -> (y1 : Set/type (B x')) -> (p0 : PathP (i. Set/type (B (p i))) y0 y1) -> (q0 : PathP (i. Set/type (B (q'' i))) y0 y1)
                   -> PathP (i. PathP (j. Set/type (B (spq0 i j))) y0 y1) p0 q0)
      ( square/dependent-fill/refl A B x x' p)

#+end_src

#+RESULTS:
: Typecheck has succeeded.

