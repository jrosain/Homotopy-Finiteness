module Lib.Prop.Set where

import Stdlib.Prelude
import Lib.Data.Nat
import Lib.Prop.Comp

axiom-K (A : U) : U =
  (x : A) -> (p : Path A x x) -> Path (Path A x x) (refl A x) p

is-set/axiom-K (A : U) (s : is-set A) : axiom-K A =
  \ x. s x x (refl A x)

axiom-K/is-set (A : U) (ax : axiom-K A) : is-set A =
  \ x y p q.
    let a : Path A x y = comp A x y p y (refl A y)
        b : Path A x y = comp A x y p y (comp A y x (inv A x y q) y q)
        c : Path A x y = comp A x x (comp A x y p x (inv A x y q)) y q
        d : Path A x y = comp A x x (refl A x) y q in
  comp-n (Path A x y) five-Nat p a (refl/comp-r A x y p)
                                 b (ap (Path A y y) (Path A x y) (\ r. comp A x y p y r) (refl A y) (comp A y x (inv A x y q) y q)
                                       (comp/inv-l' A x y q))
                                 c (comp/assoc' A x y p x (inv A x y q) y q)
                                 d (ap (Path A x x) (Path A x y) (\ r. comp A x x r y q) (comp A x y p x (inv A x y q)) (refl A x)
                                       (inv (Path A x x) (refl A x) (comp A x y p x (inv A x y q)) (ax x (comp A x y p x (inv A x y q)))))
                                 q (comp/ident-l A x y q)

is-bin-rel (A : U) (R : A -> A -> U) : U =
  (x y : A) -> is-prop (R x y)

is-bin-rel/is-refl (A : U) (R : A -> A -> U) : U =
  (x : A) -> R x x

is-bin-rel/is-identifiable (A : U) (R : A -> A -> U) : U =
  (x y : A) -> R x y -> Path A x y

is-bin-rel/is-fam-equiv-map (A : U) (R : A -> A -> U) (r : is-bin-rel/is-refl A R) (x y : A) (p : Path A x y) : R x y =
  J A x (\ z _. R x z) (r x) y p

--is-bin-rel/is-fam-equiv (A : U) (R : A -> A -> U) (b : is-bin-rel A R) (r : is-bin-rel/is-refl A R) (
