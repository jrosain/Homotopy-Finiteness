module Lib.Prop.Comp where

import Stdlib.Prelude
import Lib.Data.Nat

comp/inv-r/refl (A : U) (x : A) : Path (Path A x x) (comp A x x (refl A x) x (inv A x x (refl A x))) (refl A x)
  = comp-n (Path A x x) two-Nat
      (comp A x x (refl A x) x (inv A x x (refl A x)))
      (comp A x x (refl A x) x (refl A x))             (\i. (comp A x x (refl A x) x ((inv/refl A x) i)))
      (refl A x)                                       (comp/ident-r A x x (refl A x))

comp/inv-r (A : U) (x : A) : (y : A) (p : Path A x y) -> Path (Path A x x) (comp A x y p x (inv A x y p)) (refl A x) =
  J A x (\ y p. Path (Path A x x) (comp A x y p x (inv A x y p)) (refl A x)) (comp/inv-r/refl A x)

comp/inv-r' (A : U) (x y : A) (p : Path A x y) : Path (Path A x x) (refl A x) (comp A x y p x (inv A x y p)) =
  inv (Path A x x) (comp A x y p x (inv A x y p)) (refl A x) (comp/inv-r A x y p)

refl/comp-r (A : U) (x y : A) (p : Path A x y) : Path (Path A x y) p (comp A x y p y (refl A y)) =
  inv (Path A x y) (comp A x y p y (refl A y)) p (comp/ident-r A x y p)

refl/sym (A : U) (x : A) : Path (Path A x x) (refl A x) (inv A x x (refl A x)) =
  (inv (Path A x x) (inv A x x (refl A x)) (refl A x) (inv/refl A x))

comp/assoc' (A : U) (x y : A) (p : Path A x y) (z : A) (q : Path A y z) (w : A) (r : Path A z w)
               : Path (Path A x w) (comp A x y p w (comp A y z q w r)) (comp A x z (comp A x y p z q) w r) =
  inv (Path A x w) (comp A x z (comp A x y p z q) w r) (comp A x y p w (comp A y z q w r)) (comp/assoc A x y p z q w r)
