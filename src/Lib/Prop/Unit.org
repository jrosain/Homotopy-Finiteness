#+TITLE: Unit Type Properties
#+NAME: Unit
#+AUTHOR: Johann Rosain

* Unit properties

  #+begin_src ctt
  module Lib.Prop.Unit where
  #+end_src

This file defines some useful results of the =Unit= datatype.

** Packages imports

The imported packages can be accessed via the following links:
   - [[../Data/Unit.org][Lib/Data/Unit]]
   #+begin_src ctt
  import Stdlib.Prelude  
  import Lib.Data.Unit
   #+end_src

** Unicity of unit
By =Unit=-induction, it suffices to show that =Path Unit star star= is inhabited. The constant path suffices.
   #+begin_src ctt
  Unit/uniqueness (x : Unit) : Path Unit star x =
    ind-Unit (\ x'. Path Unit star x')
             (refl Unit star) x

  Unit/uniqueness' (x : Unit) : Path Unit x star =
    inv Unit star x (Unit/uniqueness x)
   #+end_src

** =Unit= is a proposition
Any =x, y : Unit= are thus equal.
#+begin_src ctt
  Unit/all-elements-equal (x : Unit) (y : Unit) : Path Unit x y =
    comp Unit x star
      (Unit/uniqueness' x)
      y
      (Unit/uniqueness y)
#+end_src
That is, =Unit= is a proposition.
   #+begin_src ctt
  Unit/is-prop : is-prop Unit =
    Unit/all-elements-equal

  Unit/Prop : Prop =
    ( Unit, Unit/is-prop)
   #+end_src

** =Unit= is contractible
This also shows that =Unit= is contractible.
#+begin_src ctt
  Unit/is-contr : is-contr Unit =
    (star, Unit/uniqueness)
#+end_src

** =Unit= is set
And that it is a set.
#+begin_src ctt
  Unit/is-set : is-set Unit =
    is-contr->is-set Unit Unit/is-contr
#+end_src

** The identity types of =Unit= are contractible
   #+begin_src ctt
  Unit/id-is-contr (x y : Unit) : is-contr (Path Unit x y) =
    (Unit/is-prop x y, \ q. Unit/is-set x y (Unit/is-prop x y) q)
   #+end_src

