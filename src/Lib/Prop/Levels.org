#+NAME: Levels
#+AUTHOR: Johann Rosain

* Truncation levels properties

  #+begin_src ctt
  module Lib.Prop.Levels where
  #+end_src

** Packages imports

   #+begin_src ctt
  import Stdlib.Prelude
  import Lib.Prop.Proposition
  import Lib.Prop.Set
  import Lib.Univalence
   #+end_src

** Closure under equivalence for propositions and sets

   #+begin_src ctt
  is-prop/closed-equiv (A B : U) (e : Equiv A B) (H : is-prop B) : is-prop A =
    has-contr-eq/is-prop A (is-of-lvl/closed-equiv A B e one-Nat (is-prop/has-contr-eq B H))

  is-prop/closed-equiv' (A B : U) (e : Equiv A B) (H : is-prop A) : is-prop B =
    has-contr-eq/is-prop B (is-of-lvl/closed-equiv' A B e one-Nat (is-prop/has-contr-eq A H))

  is-set/closed-equiv (A B : U) (e : Equiv A B) (H : is-set B) : is-set A =
    let f : A -> B = Equiv/map A B e in
    \ x y. is-prop/closed-equiv (Path A x y) (Path B (f x) (f y)) (Equiv/Equiv-id A B e x y) (H (f x) (f y))

  is-set/closed-equiv' (A B : U) (e : Equiv A B) (H : is-set A) : is-set B =
    is-set/closed-equiv B A (Equiv/sym A B e) H    
   #+end_src

** =is-prop= is a proposition

   #+begin_src ctt
  is-prop/is-set (A : U) (is-prop-A : is-prop A) : is-set A =
    \ x y. is-contr->is-prop (Path A x y) (is-prop/has-contr-eq A is-prop-A x y)

  is-prop/is-prop (A : U) : is-prop (is-prop A) =
    is-prop/ass-inh
      ( is-prop A)
      ( \ is-prop-A.
          is-prop/pi-2 A
            ( \ _. A)
            ( \ x y. Path A x y)
            ( is-prop/is-set A is-prop-A))
   #+end_src
TODO: the thing above has really long eval time, find out why.

** =UU-Prop= is a set
=Equiv= is a proposition whenever =B= is a proposition.
#+begin_src ctt
  Equiv/is-prop (A : U) (B : UU-Prop) : is-prop (Equiv A (Prop/type B)) =
    \ e e'.
      SgPath-prop
        ( A -> Prop/type B)
        ( is-equiv A
          ( Prop/type B))
        ( is-equiv/is-prop A
          ( Prop/type B)) e e'
        ( is-prop/pi A
          ( \ _. Prop/type B)
          ( \ _. Prop/is-prop B) e.1 e'.1)
#+end_src
By univalence, the path between the underlying type of propositions is equivalent to a proposition, so it is also a proposition.
#+begin_src ctt
  Prop/eq-Prop (A B : UU-Prop) : is-prop (Path U (Prop/type A) (Prop/type B)) =
    is-prop/closed-equiv'
      ( Equiv (Prop/type A) (Prop/type B))
      ( Path U (Prop/type A) (Prop/type B))
      ( univalence (Prop/type A) (Prop/type B))
      ( Equiv/is-prop (Prop/type A) B)
#+end_src
Moreover, path between propositions is equivalent to path between their underlying type.
#+begin_src ctt
  UU-Prop/eq/map (A B : UU-Prop) : Path U (Prop/type A) (Prop/type B) -> Path UU-Prop A B =
    SgPath-prop U is-prop
      ( is-prop/is-prop) A B    

  UU-Prop/eq (A B : UU-Prop) : Path UU-Prop A B -> Path U (Prop/type A) (Prop/type B) =
    \ p i. (p i).1

  UU-Prop/is-equiv (A : UU-Prop) : (B : UU-Prop) -> is-equiv (Path UU-Prop A B) (Path U (Prop/type A) (Prop/type B)) (UU-Prop/eq A B) =
    fundamental-theorem-id UU-Prop
      ( \ B. Path U (Prop/type A) (Prop/type B)) A
      ( UU-Prop/eq A)
      ( ( A, refl U (Prop/type A)),
        ( \ t. SgPath-prop UU-Prop
              ( \ B. Path U (Prop/type A) (Prop/type B))
              ( Prop/eq-Prop A)
              ( A, refl U (Prop/type A)) t
              ( UU-Prop/eq/map A t.1 t.2)))

  UU-Prop/Eq/Equiv (A B : UU-Prop) : Equiv (Path UU-Prop A B) (Path U (Prop/type A) (Prop/type B)) =
    ( UU-Prop/eq A B,
      UU-Prop/is-equiv A B)

  UU-Prop/is-set (A B : UU-Prop) : is-prop (Path UU-Prop A B) =
    is-prop/closed-equiv
      ( Path UU-Prop A B)
      ( Path U (Prop/type A) (Prop/type B))
      ( UU-Prop/Eq/Equiv A B)
      ( Prop/eq-Prop A B)

  UU-Prop/Set : UU-Set =
    ( UU-Prop,
      UU-Prop/is-set)
#+end_src

#+RESULTS:
: Typecheck has succeeded.

** Lifting prop universe to set universe

   #+begin_src ctt
  Prop/Set (A : UU-Prop) : UU-Set =
    (Prop/type A, is-prop/is-set (Prop/type A) (Prop/is-prop A))
   #+end_src

** =is-set= is a proposition

   #+begin_src ctt
  is-set/is-prop (A : U) : is-prop (is-set A) =
    is-prop/ass-inh
      ( is-set A)
      ( \ is-set-A.
          is-prop/pi-2 A
            ( \ _. A)
            ( \ x y. is-prop (Path A x y))
            ( \ x y. is-prop/is-prop (Path A x y)))

  is-set/Prop (A : U) : UU-Prop =
    ( is-set A,
      is-set/is-prop A)
   #+end_src

#+RESULTS:
: Typecheck has succeeded.

** Closure of sets under product
If =A= and =B= are both sets, then =A * B= is also a set.
#+begin_src ctt
  Set/closed-Prod/is-set (A B : UU-Set) : is-set ((Set/type A) * (Set/type B)) =
    \ t u.
      is-prop/closed-equiv
        ( Path ((Set/type A) * (Set/type B)) t u)
        ( Eq-prod
          ( Set/type A)
          ( Set/type B) t u)
        ( Eq-prod/Equiv
          ( Set/type A)
          ( Set/type B) t u)
        ( is-prop/prod
          ( Path (Set/type A) t.1 u.1)
          ( Path (Set/type B) t.2 u.2)
          ( Set/is-set A t.1 u.1)
          ( Set/is-set B t.2 u.2))


  Set/closed-Prod (A B : UU-Set) : UU-Set =
    ( (Set/type A) * (Set/type B),
      Set/closed-Prod/is-set A B)
#+end_src

** Closure of sets under \Sigma-types

   #+begin_src ctt
  Set/closed-Sg/is-set (A : UU-Set) (B : (Set/type A) -> UU-Set) : is-set (Sg (Set/type A) (\ x. Set/type (B x))) =
    \ t u p q.
      let p' : PathP (i. Set/type (B (p i).1)) t.2 u.2 = \ i. (p i).2
          q' : PathP (i. Set/type (B (q i).1)) t.2 u.2 = \ i. (q i).2
          spq : Path (Path (Set/type A) t.1 u.1) (\ i. (p i).1) (\ i. (q i).1) = Set/is-set A t.1 u.1 ( \ i. (p i).1) ( \ i. (q i).1)
          r  : PathP (i. PathP (j. Set/type (B (spq i j))) t.2 u.2) p' q' = 
                      square/dependent-fill
                        ( Set/type A) B t.1 u.1
                        ( \ i. (p i).1)
                        ( \ i. (q i).1) spq t.2 u.2 p' q'
      in
      \ i. SgPathP->PathSg
          ( Set/type A)
          ( \ x. Set/type (B x)) t u
          ( spq i, r i)

  Set/closed-Sg (A : UU-Set) (B : (Set/type A) -> UU-Set) : UU-Set =
    ( Sg (Set/type A) (\ x. Set/type (B x)),
      Set/closed-Sg/is-set A B)
   #+end_src

#+RESULTS:
: Typecheck has succeeded.
** Closure of sets under coproducts 
   #+begin_src ctt
  Set/closed-Coprod/is-set/inl (A B : UU-Set) (x : Set/type A)
                                    : (v : Coprod (Set/type A) (Set/type B))
                                      -> is-prop (Path (Coprod (Set/type A) (Set/type B)) (inl x) v)  = split
    inl a ->
      is-prop/closed-equiv
        ( Path (Coprod (Set/type A) (Set/type B)) (inl x) (inl a))
        ( Path (Set/type A) x a)
        ( Coprod/Eq/Equiv (Set/type A) (Set/type B) (inl x) (inl a))
        ( Set/is-set A x a)
    inr y ->
      is-prop/closed-equiv
        ( Path (Coprod (Set/type A) (Set/type B)) (inl x) (inr y))
        ( Empty)
        ( Coprod/Eq/Equiv (Set/type A) (Set/type B) (inl x) (inr y))
        ( Empty/is-prop)

  Set/closed-Coprod/is-set/inr (A B : UU-Set) (y : Set/type B)
                                    : (v : Coprod (Set/type A) (Set/type B))
                                      -> is-prop (Path (Coprod (Set/type A) (Set/type B)) (inr y) v)  = split
    inl a ->
      is-prop/closed-equiv
        ( Path (Coprod (Set/type A) (Set/type B)) (inr y) (inl a))
        ( Empty)
        ( Coprod/Eq/Equiv (Set/type A) (Set/type B) (inr y) (inl a))
        ( Empty/is-prop)
    inr b ->
      is-prop/closed-equiv
        ( Path (Coprod (Set/type A) (Set/type B)) (inr y) (inr b))
        ( Path (Set/type B) y b)
        ( Coprod/Eq/Equiv (Set/type A) (Set/type B) (inr y) (inr b))
        ( Set/is-set B y b)

  Set/closed-Coprod/is-set (A B : UU-Set) : is-set (Coprod (Set/type A) (Set/type B)) = split
    inl x -> Set/closed-Coprod/is-set/inl A B x
    inr y -> Set/closed-Coprod/is-set/inr A B y

  Set/closed-Coprod (A B : UU-Set) : UU-Set =
    ( Coprod (Set/type A) (Set/type B),
      Set/closed-Coprod/is-set A B)
   #+end_src

#+RESULTS:
: Typecheck has succeeded.
** (x, y) = (x', y') is x = x' if the type of y, y' is proposition
The back-and-forth maps are already defined; one is Sg-Path/left and the other is SgPath-prop. We show that they are inverses to each other.
    #+begin_src ctt
  PathPath/Equiv (A : U) (B : A -> U) (u v : Sg A B) (p q : Path (Sg A B) u v) 
                    : Equiv (Path (Path (Sg A B) u v) p q) (Path (SgPathP A B u v) (PathSg->SgPathP A B u v p) (PathSg->SgPathP A B u v q))  =
    Equiv/Equiv-id
      ( Path (Sg A B) u v)
      ( SgPathP A B u v)
      ( PathSg-equiv-SgPathP A B u v) p q

  PathPath/map (A : U) (B : A -> U) (u v : Sg A B) (p q : Path (Sg A B) u v) (spq : Path (SgPathP A B u v) (PathSg->SgPathP A B u v p) (PathSg->SgPathP A B u v q))
           : Path (Path (Sg A B) u v) p q =
    Equiv/inv-map
      ( Path (Path (Sg A B) u v) p q)
      ( Path (SgPathP A B u v) (PathSg->SgPathP A B u v p) (PathSg->SgPathP A B u v q))
      ( PathPath/Equiv A B u v p q) spq

  SgPath-prop' (A : U) (B : A -> U) (H : (x : A) -> is-prop (B x)) (u v : Sg A B) (p : Path A u.1 v.1) : Path (Sg A B) u v =
    SgPathP->PathSg A B u v (p, J A u.1 (\ z q. (y : B z) -> PathP (i. B (q i)) u.2 y) (\ y. H u.1 u.2 y) v.1 p v.2)

  SgPath-prop/right-htpy (A : U) (B : A -> U) (H : (x : A) -> is-prop (B x)) (u v : Sg A B) (p : Path (Sg A B) u v)
                            : Path (Path (Sg A B) u v) (SgPath-prop' A B H u v (Sg-path/left A B u v p)) p =
    PathPath/map A B u v 
      ( SgPath-prop' A B H u v (Sg-path/left A B u v p)) p
      ( SgPathP->PathSg
        ( Path A u.1 v.1)
        ( \ r. PathP (i. B (r i)) u.2 v.2)
        ( PathSg->SgPathP A B u v
          ( SgPath-prop' A B H u v (Sg-path/left A B u v p)))
        ( PathSg->SgPathP A B u v p)
        ( refl (Path A u.1 v.1) (PathSg->SgPathP A B u v p).1 ,
          J A u.1
          ( \ z q. (y :B z) -> (r s : PathP (i. B (q i)) u.2 y) -> Path (PathP (i. B (q i)) u.2 y) r s)
          ( \ y r s. is-prop/is-set
                    ( B u.1)
                    ( H u.1) u.2 y r s) v.1 (\ i. (p i).1) v.2
                    ( PathSg->SgPathP A B u v
                      ( SgPath-prop' A B H u v (Sg-path/left A B u v p))).2
                      (PathSg->SgPathP A B u v p).2))

  SgPath-prop/left-htpy (A : U) (B : A -> U) (H : (x : A) -> is-prop (B x)) (u v : Sg A B) (p : Path A u.1 v.1)
                           : Path (Path A u.1 v.1) (Sg-path/left A B u v (SgPath-prop' A B H u v p)) p =
    refl (Path A u.1 v.1) p

  SgPath-prop/Equiv (A : U) (B : A -> U) (H : (x : A) -> is-prop (B x)) (u v : Sg A B)
                       : Equiv (Path A u.1 v.1) (Path (Sg A B) u v) =
    has-inverse/Equiv
      ( Path A u.1 v.1)
      ( Path (Sg A B) u v)
      ( SgPath-prop' A B H u v)
      ( Sg-path/left A B u v,
        ( SgPath-prop/right-htpy A B H u v,
          SgPath-prop/left-htpy A B H u v))

  SgPath-prop/Equiv' (A : U) (B : A -> U) (H : (x : A) -> is-prop (B x)) (u v : Sg A B)
                        : Equiv (Path (Sg A B) u v) (Path A u.1 v.1) =
    has-inverse/Equiv
      ( Path (Sg A B) u v)
      ( Path A u.1 v.1)
      ( Sg-path/left A B u v)
      ( SgPath-prop' A B H u v,
        ( SgPath-prop/left-htpy A B H u v,
          SgPath-prop/right-htpy A B H u v))
    #+end_src

#+RESULTS:
: Typecheck has succeeded.
