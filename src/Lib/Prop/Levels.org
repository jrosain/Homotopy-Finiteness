#+NAME: Levels
#+AUTHOR: Johann Rosain

* Truncation levels properties

  #+begin_src ctt
  module Lib.Prop.Levels where
  #+end_src

** Packages imports

   #+begin_src ctt
  import Stdlib.Prelude
  import Lib.Prop.Proposition
  import Lib.Prop.Set
   #+end_src

** Closure under equivalence for propositions and sets

   #+begin_src ctt
  is-prop/closed-equiv (A B : U) (e : Equiv A B) (H : is-prop B) : is-prop A =
    has-contr-eq/is-prop A (is-of-lvl/closed-equiv A B e one-Nat (is-prop/has-contr-eq B H))

  is-prop/closed-equiv' (A B : U) (e : Equiv A B) (H : is-prop A) : is-prop B =
    has-contr-eq/is-prop B (is-of-lvl/closed-equiv' A B e one-Nat (is-prop/has-contr-eq A H))

  is-set/closed-equiv (A B : U) (e : Equiv A B) (H : is-set B) : is-set A =
    let f : A -> B = Equiv/map A B e in
    \ x y. is-prop/closed-equiv (Path A x y) (Path B (f x) (f y)) (Equiv/Equiv-id A B e x y) (H (f x) (f y))

  is-set/closed-equiv' (A B : U) (e : Equiv A B) (H : is-set A) : is-set B =
    is-set/closed-equiv B A (Equiv/sym A B e) H    
   #+end_src

** =is-prop= is a proposition

   #+begin_src ctt
  is-prop/is-set (A : U) (is-prop-A : is-prop A) : is-set A =
    \ x y. is-contr->is-prop (Path A x y) (is-prop/has-contr-eq A is-prop-A x y)

  is-prop/is-prop (A : U) : is-prop (is-prop A) =
    is-prop/ass-inh
      ( is-prop A)
      ( \ is-prop-A.
          is-prop/pi-2 A
            ( \ _. A)
            ( \ x y. Path A x y)
            ( is-prop/is-set A is-prop-A))
   #+end_src
TODO: the thing above has really long eval time, find out why.

** Lifting prop universe to set universe

   #+begin_src ctt
  Prop/Set (A : UU-Prop) : UU-Set =
    (Prop/type A, is-prop/is-set (Prop/type A) (Prop/is-prop A))
   #+end_src

** =is-set= is a proposition

   #+begin_src ctt
  is-set/is-prop (A : U) : is-prop (is-set A) =
    is-prop/ass-inh
      ( is-set A)
      ( \ is-set-A.
          is-prop/pi-2 A
            ( \ _. A)
            ( \ x y. is-prop (Path A x y))
            ( \ x y. is-prop/is-prop (Path A x y)))

  is-set/Prop (A : U) : UU-Prop =
    ( is-set A,
      is-set/is-prop A)
   #+end_src

#+RESULTS:
: Typecheck has succeeded.

** Closure of set under product
If =A= and =B= are both sets, then =A * B= is also a set.
#+begin_src ctt
  Set/closed-Prod/is-set (A B : UU-Set) : is-set ((Set/type A) * (Set/type B)) =
    \ t u.
      is-prop/closed-equiv
        ( Path ((Set/type A) * (Set/type B)) t u)
        ( Eq-prod
          ( Set/type A)
          ( Set/type B) t u)
        ( Eq-prod/Equiv
          ( Set/type A)
          ( Set/type B) t u)
        ( is-prop/prod
          ( Path (Set/type A) t.1 u.1)
          ( Path (Set/type B) t.2 u.2)
          ( Set/is-set A t.1 u.1)
          ( Set/is-set B t.2 u.2))


  Set/closed-Prod (A B : UU-Set) : UU-Set =
    ( (Set/type A) * (Set/type B),
      Set/closed-Prod/is-set A B)
#+end_src

** Closure of sets under \Sigma-types

   #+begin_src ctt
  Set/closed-Sg/is-set (A : UU-Set) (B : (Set/type A) -> UU-Set) : is-set (Sg (Set/type A) (\ x. Set/type (B x))) =
    \ t u p q.
      let p' : PathP (i. Set/type (B (p i).1)) t.2 u.2 = \ i. (p i).2
          q' : PathP (i. Set/type (B (q i).1)) t.2 u.2 = \ i. (q i).2
          spq : Path (Path (Set/type A) t.1 u.1) (\ i. (p i).1) (\ i. (q i).1) = Set/is-set A t.1 u.1 ( \ i. (p i).1) ( \ i. (q i).1)
          r  : PathP (i. PathP (j. Set/type (B (spq i j))) t.2 u.2) p' q' = 
                      square/dependent-fill
                        ( Set/type A) B t.1 u.1
                        ( \ i. (p i).1)
                        ( \ i. (q i).1) spq t.2 u.2 p' q'
      in
      \ i. SgPathP->PathSg
          ( Set/type A)
          ( \ x. Set/type (B x)) t u
          ( spq i, r i)

  Set/closed-Sg (A : UU-Set) (B : (Set/type A) -> UU-Set) : UU-Set =
    ( Sg (Set/type A) (\ x. Set/type (B x)),
      Set/closed-Sg/is-set A B)
   #+end_src

#+RESULTS:
: Typecheck has succeeded.
