module Lib.Prop.Contr where

import Stdlib.Prelude
import Lib.Prop.Sg  
import Lib.Prop.MiscPaths

center (A : U) (c : is-contr A) : A =
  c.1

contraction (A : U) (c : is-contr A) : (x : A) -> Path A (center A c) x =
  c.2

is-contr/Sg-path-center (A : U) (x : A) : Sg A (\ y. Path A x y) =
  (x, refl A x)

is-contr/Sg-path-contr (A : U) (x : A) (v : Sg A (\ y. Path A x y))
                          : Path (Sg A (\ y. Path A x y)) (is-contr/Sg-path-center A x) v =
  let B : A -> U = (\ y. Path A x y)
      u : Sg A B = (is-contr/Sg-path-center A x)
  in
  ind-Sg A B (\ z. Path (Sg A B) u z)
             (\ y q. J A u.1 (\ y' r. Path (Sg A B) u (y', r))
                            (SgPathO->PathSg A B u u (refl A u.1, PathO/refl A u.1 B u.2 u.2 (refl (B u.1) u.2)))
                      y q) v

is-contr/Sg-path-is-contr (A : U) (x : A) : is-contr (Sg A (\ y. Path A x y)) =
  (is-contr/Sg-path-center A x, is-contr/Sg-path-contr A x)

Sg/left-unit-law-is-contr/map (A : U) (B : A -> U) (c : is-contr A) (a : A) : B a -> Sg A B =
  \ b. (a, b)

Sg/left-unit-law-is-contr/inv-map (A : U) (B : A -> U) (c : is-contr A) (a : A) : Sg A B -> B a =
  \ t. tr A t.1 a (comp A t.1 c.1 (inv A c.1 t.1 (c.2 t.1)) a (c.2 a)) B t.2

Sg/left-unit-law-is-contr/right-htpy (A : U) (B : A -> U) (c : is-contr A) (a : A)
                                        : Htpy' (Sg A B) (Sg A B) (\ t. Sg/left-unit-law-is-contr/map A B c a (Sg/left-unit-law-is-contr/inv-map A B c a t)) (id (Sg A B)) =
  \ t. SgPathO->PathSg A B (Sg/left-unit-law-is-contr/map A B c a (Sg/left-unit-law-is-contr/inv-map A B c a t)) t
    (inv A t.1 a (comp A t.1 c.1 (inv A c.1 t.1 (c.2 t.1)) a (c.2 a)),
     tr/left-inv A B t (Sg/left-unit-law-is-contr/map A B c a (Sg/left-unit-law-is-contr/inv-map A B c a t)) (comp A t.1 c.1 (inv A c.1 t.1 (c.2 t.1)) a (c.2 a)))

Sg/left-unit-law-is-contr (A : U) (B : A -> U) (c : is-contr A) (a : A) : retract-of (Sg A B) (B a) =
  (Sg/left-unit-law-is-contr/inv-map A B c a, (Sg/left-unit-law-is-contr/map A B c a, Sg/left-unit-law-is-contr/right-htpy A B c a))

Sg/is-contr (A : U) (B : A -> U) (is-contr-A : is-contr A) (is-contr-fam : ((x : A) -> is-contr (B x)))
               : is-contr (Sg A B) =
  is-contr/closed-retract
    (Sg A B)
    (B (center A is-contr-A))
    (Sg/left-unit-law-is-contr A B is-contr-A (center A is-contr-A))
    (is-contr-fam (center A is-contr-A))

Sg/is-contr' (A : U) (B : A -> U) (is-contr-A : is-contr A) (a : A) (is-contr-B : is-contr (B a))
                : is-contr (Sg A B) =
  is-contr/closed-retract
    (Sg A B)
    (B a)
    (Sg/left-unit-law-is-contr A B is-contr-A a)
    (is-contr-B)
