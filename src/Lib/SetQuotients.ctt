module Lib.SetQuotients where

import Lib.Prop.Set
import Lib.Prop.Levels
import Lib.EquivalenceRelations
import Lib.Image

Set-quotient/identifiable-map-relation (A : U) (R : Relation-Prop A) (B : UU-Set) : U =
  Sg (A -> Set/type B) (\ f. (x y : A) -> (Prop/type (R x y)) -> Path (Set/type B) (f x) (f y))

Set-quotient/identifiable-map-relation/map (A : U) (R : Relation-Prop A) (B : UU-Set) (t : Set-quotient/identifiable-map-relation A R B) : A -> Set/type B = t.1

Set-quotient/identifiable-map-relation/id-map (A : U) (R : Relation-Prop A) (B : UU-Set) (t : Set-quotient/identifiable-map-relation A R B)
                                                 : (x y : A) -> (Prop/type (R x y)) -> Path (Set/type B) (Set-quotient/identifiable-map-relation/map A R B t x)
                                                                                                       (Set-quotient/identifiable-map-relation/map A R B t y) = t.2

precomp-Set-quotient (A : U) (R : Relation-Prop A) (B X : UU-Set) (f : Set-quotient/identifiable-map-relation A R B) (g : Set/hom B X)
                        : Set-quotient/identifiable-map-relation A R X =
  ( \ x. g (Set-quotient/identifiable-map-relation/map A R B f x),
    \ x y r. ap ( Set/type B)
               ( Set/type X) g
               ( Set-quotient/identifiable-map-relation/map A R B f x)
               ( Set-quotient/identifiable-map-relation/map A R B f y)
               ( Set-quotient/identifiable-map-relation/id-map A R B f x y r))

is-set-quotient (A : U) (R : Relation-Prop A) (B : UU-Set) (f : Set-quotient/identifiable-map-relation A R B) : U =
  (X : UU-Set) -> is-equiv (Set/hom B X) (Set-quotient/identifiable-map-relation A R X) (precomp-Set-quotient A R B X f)

data Set-quotient (A : U) (R : Relation-Prop A) : U
  = Set-quotient/q (a : A)
  | Set-quotient/eq (a b : A) (r : Prop/type (R a b)) <i> [(i=0) -> Set-quotient/q a, (i=1) -> Set-quotient/q b]
  | Set-quotient/squash (x y : Set-quotient A R) (p q : Path (Set-quotient A R) x y) <i j> [(i=0) -> p j, (i=1) -> q j, (j=0) -> x, (j=1) -> y]

Set-quotient/respects-relation (A : U) (R : Relation-Prop A) (x y : A) : Prop/type (R x y) -> Path (Set-quotient A R) (Set-quotient/q x) (Set-quotient/q y) =
  \ r i. Set-quotient/eq x y r i

Set-quotient/is-set (A : U) (R : Relation-Prop A) : is-set (Set-quotient A R) =
  \ x y p q i j. Set-quotient/squash x y p q i j

Set-quotient/Set (A : U) (R : Relation-Prop A) : UU-Set =
  ( Set-quotient A R,
    Set-quotient/is-set A R)

ind-Set-quotient (A : U) (R : Relation-Prop A) (P : Set-quotient A R -> UU-Set) (f : (x : A) -> Set/type (P (Set-quotient/q x)))
                 (feq : (x y : A) -> (r : Prop/type (R x y)) -> PathP (i. Set/type (P (Set-quotient/eq x y r i))) (f x) (f y)) : (x : Set-quotient A R) -> Set/type (P x) = split
  Set-quotient/q a -> f a
  Set-quotient/eq x y r i -> feq x y r i
  Set-quotient/squash x y p q i j ->
    square/dependent-fill
      ( Set-quotient A R) P x y p q
      ( \ i' j'. Set-quotient/squash x y p q i' j')
      ( ind-Set-quotient A R P f feq x)
      ( ind-Set-quotient A R P f feq y)
      ( \ k. ind-Set-quotient A R P f feq (p k))
      ( \ k. ind-Set-quotient A R P f feq (q k)) i j

rec-Set-quotient (A : U) (R : Relation-Prop A) (B : UU-Set) (f : A -> Set/type B) (feq : (x y : A) -> Prop/type (R x y) -> Path (Set/type B) (f x) (f y))
                    : (x : Set-quotient A R) -> Set/type B =
  ind-Set-quotient A R
    ( \ _. B) f feq

PathO-to-PathP (A : U) (x y : A) (p : Path A x y) (B : A -> U) (u : B x) (v : B y) : (PathO A x y p B u v) -> PathP (i. B (p i)) u v =
  Equiv/inv-map 
    ( PathP (i. B (p i)) u v)
    ( PathO A x y p B u v)
    ( path-to-equiv
      ( PathP (i. B (p i)) u v)
      ( PathO A x y p B u v)
      ( PathP-eq-PathO A x y p B u v))

ind-Set-quotient/Prop (A : U) (R : Relation-Prop A) (P : Set-quotient A R -> UU-Prop) (f : (x : A) -> Prop/type (P (Set-quotient/q x)))
                         : (x : Set-quotient A R) -> Prop/type (P x) = split
  Set-quotient/q a -> f a
  Set-quotient/eq x y r i ->
    PathO-to-PathP
      ( Set-quotient A R)
      ( Set-quotient/q x)
      ( Set-quotient/q y)
      ( Set-quotient/respects-relation A R x y r)
      ( \ z. Prop/type (P z))
      ( f x)
      ( f y)
      ( Prop/is-prop
        ( P (Set-quotient/q y))
        ( tr (Set-quotient A R) (Set-quotient/q x) (Set-quotient/q y) (Set-quotient/respects-relation A R x y r) (\ z. Prop/type (P z)) (f x))
        ( f y)) i
  Set-quotient/squash x y p q i j ->
    square/dependent-fill
      ( Set-quotient A R)
      ( \ z. Prop/Set (P z)) x y p q
      ( \ i' j'. Set-quotient/squash x y p q i' j')
      ( ind-Set-quotient/Prop A R P f x)
      ( ind-Set-quotient/Prop A R P f y)
      ( \ k. ind-Set-quotient/Prop A R P f (p k))
      ( \ k. ind-Set-quotient/Prop A R P f (q k)) i j

rec-Set-quotient/Prop (A : U) (R : Relation-Prop A) (B : UU-Prop) (f : A -> Prop/type B)
                         : (x : Set-quotient A R) -> Prop/type B =
  ind-Set-quotient/Prop A R (\ _. B) f

Set/eq/Prop (X : UU-Set) (x y : Set/type X) : UU-Prop =
  ( Path (Set/type X) x y,
    Set/is-set X x y)

quotienting-is-surj (A : U) (R : Relation-Prop A) : is-surj A (Set-quotient A R) (\ a. Set-quotient/q a) =
  ind-Set-quotient/Prop A R
    ( \ x. Prop-trunc/Prop (Fib A (Set-quotient A R) (\ a. Set-quotient/q a) x))
    ( \ x. Prop-trunc/unit (x, refl (Set-quotient A R) (Set-quotient/q x)))

Set-quotient/relation (A : U) (R : Relation-Prop A) : Set-quotient/identifiable-map-relation A R (Set-quotient/Set A R) =
  ( (\ x. Set-quotient/q x),
    Set-quotient/respects-relation A R)

Set-quotient/is-set-quotient/map (A : U) (R : Relation-Prop A) (B : UU-Set)
                                    : (Set-quotient A R -> Set/type B) -> (Set-quotient/identifiable-map-relation A R B) =
  precomp-Set-quotient A R
    ( Set-quotient/Set A R) B
    ( Set-quotient/relation A R)

Set-quotient/is-set-quotient/inv-map (A : U) (R : Relation-Prop A) (B : UU-Set)
                                        : (Set-quotient/identifiable-map-relation A R B) -> (Set-quotient A R -> Set/type B) =
  \ t. rec-Set-quotient A R B t.1 t.2

Set-quotient/is-set-quotient/right-htpy (A : U) (R : Relation-Prop A) (B : UU-Set) (t : Set-quotient/identifiable-map-relation A R B)
                                           : Path (Set-quotient/identifiable-map-relation A R B) (Set-quotient/is-set-quotient/map A R B (Set-quotient/is-set-quotient/inv-map A R B t)) t =
  refl (Set-quotient/identifiable-map-relation A R B) t

Set-quotient/is-set-quotient/left-htpy (A : U) (R : Relation-Prop A) (B : UU-Set) (f : Set-quotient A R -> Set/type B)
                                          : Path (Set-quotient A R -> Set/type B) (Set-quotient/is-set-quotient/inv-map A R B (Set-quotient/is-set-quotient/map A R B f)) f =
  \ i x.
    rec-Prop-trunc
      ( Fib A (Set-quotient A R) (\ z. Set-quotient/q z) x)
      ( Set/eq/Prop B
        ( Set-quotient/is-set-quotient/inv-map A R B (Set-quotient/is-set-quotient/map A R B f) x)
        ( f x))
      ( \ t. 
          comp
            ( Set/type B)
            ( Set-quotient/is-set-quotient/inv-map A R B (Set-quotient/is-set-quotient/map A R B f) x)
            ( f (Set-quotient/q t.1))
            ( ap (Set-quotient A R) (Set/type B) (\ z. Set-quotient/is-set-quotient/inv-map A R B (Set-quotient/is-set-quotient/map A R B f) z) x (Set-quotient/q t.1) t.2)
            ( f x)
            ( ap (Set-quotient A R) (Set/type B) f (Set-quotient/q t.1) x (inv (Set-quotient A R) x (Set-quotient/q t.1) t.2)))
      ( quotienting-is-surj A R x) i

Set-quotient/is-set-quotient (A : U) (R : Relation-Prop A) : is-set-quotient A R (Set-quotient/Set A R) (Set-quotient/relation A R) =
  \ B.
  has-inverse/is-equiv
    ( Set-quotient A R -> Set/type B)
    ( Set-quotient/identifiable-map-relation A R B)
    ( Set-quotient/is-set-quotient/map A R B)
    ( Set-quotient/is-set-quotient/inv-map A R B,
      ( Set-quotient/is-set-quotient/right-htpy A R B,
        Set-quotient/is-set-quotient/left-htpy A R B))
