module HomotopyFiniteness where

import Lib.IsFinite
import Lib.SetTrunc

is-htpy-finite : Nat -> U -> U = split
  zero -> \ A. is-finite (Set-trunc A)
  suc k -> \ A. is-finite (Set-trunc A) *
              ( (x y : A) -> is-htpy-finite k (Path A x y))

is-htpy-finite/closed-Equiv/aux : (n : Nat) -> (A B : U) -> Equiv A B -> is-htpy-finite n B -> is-htpy-finite n A = split
  zero -> \ A B e.
    is-finite/closed-Equiv
      ( Set-trunc A)
      ( Set-trunc B)
      ( Set-trunc/Equiv A B e)
  suc n -> \ A B e is-htpy-finite-B.
    ( is-finite/closed-Equiv
        ( Set-trunc A)
        ( Set-trunc B)
        ( Set-trunc/Equiv A B e)
        ( is-htpy-finite-B.1),
      \ x y.
        is-htpy-finite/closed-Equiv/aux n
        ( Path A x y)
        ( Path B (Equiv/map A B e x) (Equiv/map A B e y))
        ( Equiv/Equiv-id A B e x y)
        ( is-htpy-finite-B.2
          ( Equiv/map A B e x)
          ( Equiv/map A B e y)))

is-htpy-finite/closed-Equiv (A B : U) (e : Equiv A B) (n : Nat) (is-htpy-finite-B : is-htpy-finite n B) : is-htpy-finite n A =
  is-htpy-finite/closed-Equiv/aux n A B e is-htpy-finite-B

is-htpy-finite/closed-Equiv' (A B : U) (e : Equiv A B) (n : Nat) (is-htpy-finite-A : is-htpy-finite n A) : is-htpy-finite n B =
  is-htpy-finite/closed-Equiv B A (Equiv/sym A B e) n is-htpy-finite-A

Fin/Equiv-Pi-Set-trunc : (k : Nat) -> (B : Fin k -> U) -> Equiv ((x : Fin k) -> Set-trunc (B x)) (Set-trunc ((x : Fin k) -> B x)) = split
  zero -> \ B.
    is-contr/Equiv
      ( Empty/universal-dependent-property
        ( Fin zero)
        ( \ n. Set-trunc (B n))
        ( Equiv/refl (Fin zero)))
      ( Set-trunc/closed-contr
        ( (x : Fin zero) -> B x)
        ( Empty/universal-dependent-property
          ( Fin zero) B
          ( Equiv/refl (Fin zero))))
  suc k -> \ B. Equiv/refl ((x : Fin (suc k)) -> B x)

-- is-htpy-finite/closed-Pi (A : U) (B : A -> U) (is-finite-A : is-finite A)
--                             : (n : Nat) -> (is-htpy-finite-B : (x : A) -> is-htpy-finite n (B x)) -> is-htpy-finite n ((x : A) -> B x) = split
--  zero -> \ is-finite-B.
--    is-finite/Pi A
--      ( \ x. Set-trunc (B x)) is-finite-A is-finite-B
