module HomotopyFiniteness where

import Lib.IsFinite
import Lib.SetTrunc
import Lib.Prop.Empty
import Lib.Prop.Coprod

is-htpy-finite' (A : U) : Nat -> U = split
  zero ->  is-finite
            ( Set-trunc A)
  suc k -> is-finite
            ( Set-trunc A) *
            ( (x y : A) -> is-htpy-finite' (Path A x y) k)

is-htpy-finite (n : Nat) (A : U) : U =
  is-htpy-finite' A n

is-finite/pi : (k : Nat) -> (B : Fin k -> U) -> ((x : Fin k) -> is-finite (B x)) -> is-finite ((x : Fin k) -> B x) = split
  zero ->
    \ B _.
      count/is-finite
        ( (x : Fin zero) -> B x)
        ( count/contr-count
          ( (x : Fin zero) -> B x)
          ( Empty/universal-dependent-property
            ( Fin zero) B
            ( Equiv/refl (Fin zero))))
  suc k ->
    \ B is-fin-B.
      is-finite/closed-Equiv
        ( (x : Fin (suc k)) -> B x)
        ( ((x : Fin k) -> B (inl x)) * (B (inr star)))
        ( Equiv/trans
          ( (x : Fin (suc k)) -> B x)
          ( ((x : Fin k) -> B (inl x)) * ((u : Unit) -> B (inr u)))
          ( ((x : Fin k) -> B (inl x)) * (B (inr star)))
          ( Coprod/dependent-universal-property
            ( Fin k) Unit B)
          ( Equiv/prod'
            ( (x : Fin k) -> B (inl x))
            ( (u : Unit) -> B (inr u))
            ( B (inr star))
            ( Equiv/pi-Unit
              ( \ u. B (inr u)))))
        ( is-finite/closed-Prod
          ( (x : Fin k) -> B (inl x))
          ( B (inr star))
          ( is-finite/pi k
            ( \ x. B (inl x))
            ( \ x. is-fin-B (inl x)))
          ( is-fin-B (inr star)))
